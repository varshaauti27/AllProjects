//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Bank.Forms {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("BankDataSet2")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BankDataSet2 : global::System.Data.DataSet {
        
        private JointHolderDataTable tableJointHolder;
        
        private AccountMasterDataTable tableAccountMaster;
        
        private ChequeBookDataTable tableChequeBook;
        
        private FixedDepositeDataTable tableFixedDeposite;
        
        private GuarantorDataTable tableGuarantor;
        
        private LockerDataTable tableLocker;
        
        private PasswordMasterDataTable tablePasswordMaster;
        
        private MinorDataTable tableMinor;
        
        private HomeStudentLoanDataTable tableHomeStudentLoan;
        
        private LoanTransactionDataTable tableLoanTransaction;
        
        private StudentLoanDataTable tableStudentLoan;
        
        private TransactionTableDataTable tableTransactionTable;
        
        private global::System.Data.DataRelation relationFK_ChequeBook_AccountMaster;
        
        private global::System.Data.DataRelation relationFK_FixedDeposite_AccountMaster;
        
        private global::System.Data.DataRelation relationFK_Guarantor_AccountMaster;
        
        private global::System.Data.DataRelation relationFK_Locker_AccountMaster;
        
        private global::System.Data.DataRelation relationFK_Minor_AccountMaster;
        
        private global::System.Data.DataRelation relationFK_HomeStudentLoan_AccountMaster;
        
        private global::System.Data.DataRelation relationFK_LoanTransaction_AccountMaster;
        
        private global::System.Data.DataRelation relationFK_StudentLoan_AccountMaster;
        
        private global::System.Data.DataRelation relationFK_TransactionTable_AccountMaster;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BankDataSet2() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BankDataSet2(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["JointHolder"] != null)) {
                    base.Tables.Add(new JointHolderDataTable(ds.Tables["JointHolder"]));
                }
                if ((ds.Tables["AccountMaster"] != null)) {
                    base.Tables.Add(new AccountMasterDataTable(ds.Tables["AccountMaster"]));
                }
                if ((ds.Tables["ChequeBook"] != null)) {
                    base.Tables.Add(new ChequeBookDataTable(ds.Tables["ChequeBook"]));
                }
                if ((ds.Tables["FixedDeposite"] != null)) {
                    base.Tables.Add(new FixedDepositeDataTable(ds.Tables["FixedDeposite"]));
                }
                if ((ds.Tables["Guarantor"] != null)) {
                    base.Tables.Add(new GuarantorDataTable(ds.Tables["Guarantor"]));
                }
                if ((ds.Tables["Locker"] != null)) {
                    base.Tables.Add(new LockerDataTable(ds.Tables["Locker"]));
                }
                if ((ds.Tables["PasswordMaster"] != null)) {
                    base.Tables.Add(new PasswordMasterDataTable(ds.Tables["PasswordMaster"]));
                }
                if ((ds.Tables["Minor"] != null)) {
                    base.Tables.Add(new MinorDataTable(ds.Tables["Minor"]));
                }
                if ((ds.Tables["HomeStudentLoan"] != null)) {
                    base.Tables.Add(new HomeStudentLoanDataTable(ds.Tables["HomeStudentLoan"]));
                }
                if ((ds.Tables["LoanTransaction"] != null)) {
                    base.Tables.Add(new LoanTransactionDataTable(ds.Tables["LoanTransaction"]));
                }
                if ((ds.Tables["StudentLoan"] != null)) {
                    base.Tables.Add(new StudentLoanDataTable(ds.Tables["StudentLoan"]));
                }
                if ((ds.Tables["TransactionTable"] != null)) {
                    base.Tables.Add(new TransactionTableDataTable(ds.Tables["TransactionTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JointHolderDataTable JointHolder {
            get {
                return this.tableJointHolder;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountMasterDataTable AccountMaster {
            get {
                return this.tableAccountMaster;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChequeBookDataTable ChequeBook {
            get {
                return this.tableChequeBook;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FixedDepositeDataTable FixedDeposite {
            get {
                return this.tableFixedDeposite;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GuarantorDataTable Guarantor {
            get {
                return this.tableGuarantor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LockerDataTable Locker {
            get {
                return this.tableLocker;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PasswordMasterDataTable PasswordMaster {
            get {
                return this.tablePasswordMaster;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MinorDataTable Minor {
            get {
                return this.tableMinor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HomeStudentLoanDataTable HomeStudentLoan {
            get {
                return this.tableHomeStudentLoan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LoanTransactionDataTable LoanTransaction {
            get {
                return this.tableLoanTransaction;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StudentLoanDataTable StudentLoan {
            get {
                return this.tableStudentLoan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransactionTableDataTable TransactionTable {
            get {
                return this.tableTransactionTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            BankDataSet2 cln = ((BankDataSet2)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["JointHolder"] != null)) {
                    base.Tables.Add(new JointHolderDataTable(ds.Tables["JointHolder"]));
                }
                if ((ds.Tables["AccountMaster"] != null)) {
                    base.Tables.Add(new AccountMasterDataTable(ds.Tables["AccountMaster"]));
                }
                if ((ds.Tables["ChequeBook"] != null)) {
                    base.Tables.Add(new ChequeBookDataTable(ds.Tables["ChequeBook"]));
                }
                if ((ds.Tables["FixedDeposite"] != null)) {
                    base.Tables.Add(new FixedDepositeDataTable(ds.Tables["FixedDeposite"]));
                }
                if ((ds.Tables["Guarantor"] != null)) {
                    base.Tables.Add(new GuarantorDataTable(ds.Tables["Guarantor"]));
                }
                if ((ds.Tables["Locker"] != null)) {
                    base.Tables.Add(new LockerDataTable(ds.Tables["Locker"]));
                }
                if ((ds.Tables["PasswordMaster"] != null)) {
                    base.Tables.Add(new PasswordMasterDataTable(ds.Tables["PasswordMaster"]));
                }
                if ((ds.Tables["Minor"] != null)) {
                    base.Tables.Add(new MinorDataTable(ds.Tables["Minor"]));
                }
                if ((ds.Tables["HomeStudentLoan"] != null)) {
                    base.Tables.Add(new HomeStudentLoanDataTable(ds.Tables["HomeStudentLoan"]));
                }
                if ((ds.Tables["LoanTransaction"] != null)) {
                    base.Tables.Add(new LoanTransactionDataTable(ds.Tables["LoanTransaction"]));
                }
                if ((ds.Tables["StudentLoan"] != null)) {
                    base.Tables.Add(new StudentLoanDataTable(ds.Tables["StudentLoan"]));
                }
                if ((ds.Tables["TransactionTable"] != null)) {
                    base.Tables.Add(new TransactionTableDataTable(ds.Tables["TransactionTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableJointHolder = ((JointHolderDataTable)(base.Tables["JointHolder"]));
            if ((initTable == true)) {
                if ((this.tableJointHolder != null)) {
                    this.tableJointHolder.InitVars();
                }
            }
            this.tableAccountMaster = ((AccountMasterDataTable)(base.Tables["AccountMaster"]));
            if ((initTable == true)) {
                if ((this.tableAccountMaster != null)) {
                    this.tableAccountMaster.InitVars();
                }
            }
            this.tableChequeBook = ((ChequeBookDataTable)(base.Tables["ChequeBook"]));
            if ((initTable == true)) {
                if ((this.tableChequeBook != null)) {
                    this.tableChequeBook.InitVars();
                }
            }
            this.tableFixedDeposite = ((FixedDepositeDataTable)(base.Tables["FixedDeposite"]));
            if ((initTable == true)) {
                if ((this.tableFixedDeposite != null)) {
                    this.tableFixedDeposite.InitVars();
                }
            }
            this.tableGuarantor = ((GuarantorDataTable)(base.Tables["Guarantor"]));
            if ((initTable == true)) {
                if ((this.tableGuarantor != null)) {
                    this.tableGuarantor.InitVars();
                }
            }
            this.tableLocker = ((LockerDataTable)(base.Tables["Locker"]));
            if ((initTable == true)) {
                if ((this.tableLocker != null)) {
                    this.tableLocker.InitVars();
                }
            }
            this.tablePasswordMaster = ((PasswordMasterDataTable)(base.Tables["PasswordMaster"]));
            if ((initTable == true)) {
                if ((this.tablePasswordMaster != null)) {
                    this.tablePasswordMaster.InitVars();
                }
            }
            this.tableMinor = ((MinorDataTable)(base.Tables["Minor"]));
            if ((initTable == true)) {
                if ((this.tableMinor != null)) {
                    this.tableMinor.InitVars();
                }
            }
            this.tableHomeStudentLoan = ((HomeStudentLoanDataTable)(base.Tables["HomeStudentLoan"]));
            if ((initTable == true)) {
                if ((this.tableHomeStudentLoan != null)) {
                    this.tableHomeStudentLoan.InitVars();
                }
            }
            this.tableLoanTransaction = ((LoanTransactionDataTable)(base.Tables["LoanTransaction"]));
            if ((initTable == true)) {
                if ((this.tableLoanTransaction != null)) {
                    this.tableLoanTransaction.InitVars();
                }
            }
            this.tableStudentLoan = ((StudentLoanDataTable)(base.Tables["StudentLoan"]));
            if ((initTable == true)) {
                if ((this.tableStudentLoan != null)) {
                    this.tableStudentLoan.InitVars();
                }
            }
            this.tableTransactionTable = ((TransactionTableDataTable)(base.Tables["TransactionTable"]));
            if ((initTable == true)) {
                if ((this.tableTransactionTable != null)) {
                    this.tableTransactionTable.InitVars();
                }
            }
            this.relationFK_ChequeBook_AccountMaster = this.Relations["FK_ChequeBook_AccountMaster"];
            this.relationFK_FixedDeposite_AccountMaster = this.Relations["FK_FixedDeposite_AccountMaster"];
            this.relationFK_Guarantor_AccountMaster = this.Relations["FK_Guarantor_AccountMaster"];
            this.relationFK_Locker_AccountMaster = this.Relations["FK_Locker_AccountMaster"];
            this.relationFK_Minor_AccountMaster = this.Relations["FK_Minor_AccountMaster"];
            this.relationFK_HomeStudentLoan_AccountMaster = this.Relations["FK_HomeStudentLoan_AccountMaster"];
            this.relationFK_LoanTransaction_AccountMaster = this.Relations["FK_LoanTransaction_AccountMaster"];
            this.relationFK_StudentLoan_AccountMaster = this.Relations["FK_StudentLoan_AccountMaster"];
            this.relationFK_TransactionTable_AccountMaster = this.Relations["FK_TransactionTable_AccountMaster"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BankDataSet2";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BankDataSet2.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableJointHolder = new JointHolderDataTable();
            base.Tables.Add(this.tableJointHolder);
            this.tableAccountMaster = new AccountMasterDataTable();
            base.Tables.Add(this.tableAccountMaster);
            this.tableChequeBook = new ChequeBookDataTable();
            base.Tables.Add(this.tableChequeBook);
            this.tableFixedDeposite = new FixedDepositeDataTable();
            base.Tables.Add(this.tableFixedDeposite);
            this.tableGuarantor = new GuarantorDataTable();
            base.Tables.Add(this.tableGuarantor);
            this.tableLocker = new LockerDataTable();
            base.Tables.Add(this.tableLocker);
            this.tablePasswordMaster = new PasswordMasterDataTable();
            base.Tables.Add(this.tablePasswordMaster);
            this.tableMinor = new MinorDataTable();
            base.Tables.Add(this.tableMinor);
            this.tableHomeStudentLoan = new HomeStudentLoanDataTable();
            base.Tables.Add(this.tableHomeStudentLoan);
            this.tableLoanTransaction = new LoanTransactionDataTable();
            base.Tables.Add(this.tableLoanTransaction);
            this.tableStudentLoan = new StudentLoanDataTable();
            base.Tables.Add(this.tableStudentLoan);
            this.tableTransactionTable = new TransactionTableDataTable();
            base.Tables.Add(this.tableTransactionTable);
            this.relationFK_ChequeBook_AccountMaster = new global::System.Data.DataRelation("FK_ChequeBook_AccountMaster", new global::System.Data.DataColumn[] {
                        this.tableAccountMaster.Acc_NoColumn}, new global::System.Data.DataColumn[] {
                        this.tableChequeBook.Acc_NoColumn}, false);
            this.Relations.Add(this.relationFK_ChequeBook_AccountMaster);
            this.relationFK_FixedDeposite_AccountMaster = new global::System.Data.DataRelation("FK_FixedDeposite_AccountMaster", new global::System.Data.DataColumn[] {
                        this.tableAccountMaster.Acc_NoColumn}, new global::System.Data.DataColumn[] {
                        this.tableFixedDeposite.Acc_NoColumn}, false);
            this.Relations.Add(this.relationFK_FixedDeposite_AccountMaster);
            this.relationFK_Guarantor_AccountMaster = new global::System.Data.DataRelation("FK_Guarantor_AccountMaster", new global::System.Data.DataColumn[] {
                        this.tableAccountMaster.Acc_NoColumn}, new global::System.Data.DataColumn[] {
                        this.tableGuarantor.Acc_NoColumn}, false);
            this.Relations.Add(this.relationFK_Guarantor_AccountMaster);
            this.relationFK_Locker_AccountMaster = new global::System.Data.DataRelation("FK_Locker_AccountMaster", new global::System.Data.DataColumn[] {
                        this.tableAccountMaster.Acc_NoColumn}, new global::System.Data.DataColumn[] {
                        this.tableLocker.Acc_NoColumn}, false);
            this.Relations.Add(this.relationFK_Locker_AccountMaster);
            this.relationFK_Minor_AccountMaster = new global::System.Data.DataRelation("FK_Minor_AccountMaster", new global::System.Data.DataColumn[] {
                        this.tableAccountMaster.Acc_NoColumn}, new global::System.Data.DataColumn[] {
                        this.tableMinor.AccNoColumn}, false);
            this.Relations.Add(this.relationFK_Minor_AccountMaster);
            this.relationFK_HomeStudentLoan_AccountMaster = new global::System.Data.DataRelation("FK_HomeStudentLoan_AccountMaster", new global::System.Data.DataColumn[] {
                        this.tableAccountMaster.Acc_NoColumn}, new global::System.Data.DataColumn[] {
                        this.tableHomeStudentLoan.Acc_NoColumn}, false);
            this.Relations.Add(this.relationFK_HomeStudentLoan_AccountMaster);
            this.relationFK_LoanTransaction_AccountMaster = new global::System.Data.DataRelation("FK_LoanTransaction_AccountMaster", new global::System.Data.DataColumn[] {
                        this.tableAccountMaster.Acc_NoColumn}, new global::System.Data.DataColumn[] {
                        this.tableLoanTransaction.AccNoColumn}, false);
            this.Relations.Add(this.relationFK_LoanTransaction_AccountMaster);
            this.relationFK_StudentLoan_AccountMaster = new global::System.Data.DataRelation("FK_StudentLoan_AccountMaster", new global::System.Data.DataColumn[] {
                        this.tableAccountMaster.Acc_NoColumn}, new global::System.Data.DataColumn[] {
                        this.tableStudentLoan.Acc_NoColumn}, false);
            this.Relations.Add(this.relationFK_StudentLoan_AccountMaster);
            this.relationFK_TransactionTable_AccountMaster = new global::System.Data.DataRelation("FK_TransactionTable_AccountMaster", new global::System.Data.DataColumn[] {
                        this.tableAccountMaster.Acc_NoColumn}, new global::System.Data.DataColumn[] {
                        this.tableTransactionTable.AccNoColumn}, false);
            this.Relations.Add(this.relationFK_TransactionTable_AccountMaster);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJointHolder() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAccountMaster() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeChequeBook() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFixedDeposite() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGuarantor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLocker() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePasswordMaster() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMinor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHomeStudentLoan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLoanTransaction() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStudentLoan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTransactionTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            BankDataSet2 ds = new BankDataSet2();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void JointHolderRowChangeEventHandler(object sender, JointHolderRowChangeEvent e);
        
        public delegate void AccountMasterRowChangeEventHandler(object sender, AccountMasterRowChangeEvent e);
        
        public delegate void ChequeBookRowChangeEventHandler(object sender, ChequeBookRowChangeEvent e);
        
        public delegate void FixedDepositeRowChangeEventHandler(object sender, FixedDepositeRowChangeEvent e);
        
        public delegate void GuarantorRowChangeEventHandler(object sender, GuarantorRowChangeEvent e);
        
        public delegate void LockerRowChangeEventHandler(object sender, LockerRowChangeEvent e);
        
        public delegate void PasswordMasterRowChangeEventHandler(object sender, PasswordMasterRowChangeEvent e);
        
        public delegate void MinorRowChangeEventHandler(object sender, MinorRowChangeEvent e);
        
        public delegate void HomeStudentLoanRowChangeEventHandler(object sender, HomeStudentLoanRowChangeEvent e);
        
        public delegate void LoanTransactionRowChangeEventHandler(object sender, LoanTransactionRowChangeEvent e);
        
        public delegate void StudentLoanRowChangeEventHandler(object sender, StudentLoanRowChangeEvent e);
        
        public delegate void TransactionTableRowChangeEventHandler(object sender, TransactionTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JointHolderDataTable : global::System.Data.TypedTableBase<JointHolderRow> {
            
            private global::System.Data.DataColumn columnJointHolderID;
            
            private global::System.Data.DataColumn columnBirthDate;
            
            private global::System.Data.DataColumn columnPhone_No;
            
            private global::System.Data.DataColumn columnNationality;
            
            private global::System.Data.DataColumn columnRes_Add;
            
            private global::System.Data.DataColumn columnOff_Add;
            
            private global::System.Data.DataColumn columnPhotoPath;
            
            private global::System.Data.DataColumn columnsignPath;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JointHolderDataTable() {
                this.TableName = "JointHolder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JointHolderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JointHolderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JointHolderIDColumn {
                get {
                    return this.columnJointHolderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BirthDateColumn {
                get {
                    return this.columnBirthDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone_NoColumn {
                get {
                    return this.columnPhone_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NationalityColumn {
                get {
                    return this.columnNationality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Res_AddColumn {
                get {
                    return this.columnRes_Add;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Off_AddColumn {
                get {
                    return this.columnOff_Add;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhotoPathColumn {
                get {
                    return this.columnPhotoPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn signPathColumn {
                get {
                    return this.columnsignPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JointHolderRow this[int index] {
                get {
                    return ((JointHolderRow)(this.Rows[index]));
                }
            }
            
            public event JointHolderRowChangeEventHandler JointHolderRowChanging;
            
            public event JointHolderRowChangeEventHandler JointHolderRowChanged;
            
            public event JointHolderRowChangeEventHandler JointHolderRowDeleting;
            
            public event JointHolderRowChangeEventHandler JointHolderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJointHolderRow(JointHolderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JointHolderRow AddJointHolderRow(decimal JointHolderID, System.DateTime BirthDate, decimal Phone_No, string Nationality, string Res_Add, string Off_Add, byte[] PhotoPath, byte[] signPath) {
                JointHolderRow rowJointHolderRow = ((JointHolderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        JointHolderID,
                        BirthDate,
                        Phone_No,
                        Nationality,
                        Res_Add,
                        Off_Add,
                        PhotoPath,
                        signPath};
                rowJointHolderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJointHolderRow);
                return rowJointHolderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JointHolderRow FindByJointHolderID(decimal JointHolderID) {
                return ((JointHolderRow)(this.Rows.Find(new object[] {
                            JointHolderID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JointHolderDataTable cln = ((JointHolderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JointHolderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnJointHolderID = base.Columns["JointHolderID"];
                this.columnBirthDate = base.Columns["BirthDate"];
                this.columnPhone_No = base.Columns["Phone_No"];
                this.columnNationality = base.Columns["Nationality"];
                this.columnRes_Add = base.Columns["Res_Add"];
                this.columnOff_Add = base.Columns["Off_Add"];
                this.columnPhotoPath = base.Columns["PhotoPath"];
                this.columnsignPath = base.Columns["signPath"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnJointHolderID = new global::System.Data.DataColumn("JointHolderID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJointHolderID);
                this.columnBirthDate = new global::System.Data.DataColumn("BirthDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthDate);
                this.columnPhone_No = new global::System.Data.DataColumn("Phone_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone_No);
                this.columnNationality = new global::System.Data.DataColumn("Nationality", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNationality);
                this.columnRes_Add = new global::System.Data.DataColumn("Res_Add", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRes_Add);
                this.columnOff_Add = new global::System.Data.DataColumn("Off_Add", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOff_Add);
                this.columnPhotoPath = new global::System.Data.DataColumn("PhotoPath", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhotoPath);
                this.columnsignPath = new global::System.Data.DataColumn("signPath", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsignPath);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnJointHolderID}, true));
                this.columnJointHolderID.AllowDBNull = false;
                this.columnJointHolderID.Unique = true;
                this.columnBirthDate.AllowDBNull = false;
                this.columnPhone_No.AllowDBNull = false;
                this.columnNationality.AllowDBNull = false;
                this.columnNationality.MaxLength = 50;
                this.columnRes_Add.AllowDBNull = false;
                this.columnRes_Add.MaxLength = 50;
                this.columnOff_Add.MaxLength = 50;
                this.columnPhotoPath.AllowDBNull = false;
                this.columnsignPath.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JointHolderRow NewJointHolderRow() {
                return ((JointHolderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JointHolderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JointHolderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JointHolderRowChanged != null)) {
                    this.JointHolderRowChanged(this, new JointHolderRowChangeEvent(((JointHolderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JointHolderRowChanging != null)) {
                    this.JointHolderRowChanging(this, new JointHolderRowChangeEvent(((JointHolderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JointHolderRowDeleted != null)) {
                    this.JointHolderRowDeleted(this, new JointHolderRowChangeEvent(((JointHolderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JointHolderRowDeleting != null)) {
                    this.JointHolderRowDeleting(this, new JointHolderRowChangeEvent(((JointHolderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJointHolderRow(JointHolderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JointHolderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AccountMasterDataTable : global::System.Data.TypedTableBase<AccountMasterRow> {
            
            private global::System.Data.DataColumn columnAcc_No;
            
            private global::System.Data.DataColumn columnReference_No;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnOpening_Date;
            
            private global::System.Data.DataColumn columnBirthDate;
            
            private global::System.Data.DataColumn columnAcc_type;
            
            private global::System.Data.DataColumn columnRes_Add;
            
            private global::System.Data.DataColumn columnOff_Add;
            
            private global::System.Data.DataColumn columnIncomeTax_No;
            
            private global::System.Data.DataColumn columnPan_No;
            
            private global::System.Data.DataColumn columnJointHolder;
            
            private global::System.Data.DataColumn columnMinor;
            
            private global::System.Data.DataColumn columnPhone_No;
            
            private global::System.Data.DataColumn columnNationality;
            
            private global::System.Data.DataColumn columnOccupation;
            
            private global::System.Data.DataColumn columnEducation;
            
            private global::System.Data.DataColumn columnSex;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterDataTable() {
                this.TableName = "AccountMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountMasterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AccountMasterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Acc_NoColumn {
                get {
                    return this.columnAcc_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Reference_NoColumn {
                get {
                    return this.columnReference_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Opening_DateColumn {
                get {
                    return this.columnOpening_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BirthDateColumn {
                get {
                    return this.columnBirthDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Acc_typeColumn {
                get {
                    return this.columnAcc_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Res_AddColumn {
                get {
                    return this.columnRes_Add;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Off_AddColumn {
                get {
                    return this.columnOff_Add;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncomeTax_NoColumn {
                get {
                    return this.columnIncomeTax_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pan_NoColumn {
                get {
                    return this.columnPan_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JointHolderColumn {
                get {
                    return this.columnJointHolder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinorColumn {
                get {
                    return this.columnMinor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone_NoColumn {
                get {
                    return this.columnPhone_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NationalityColumn {
                get {
                    return this.columnNationality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccupationColumn {
                get {
                    return this.columnOccupation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EducationColumn {
                get {
                    return this.columnEducation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SexColumn {
                get {
                    return this.columnSex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow this[int index] {
                get {
                    return ((AccountMasterRow)(this.Rows[index]));
                }
            }
            
            public event AccountMasterRowChangeEventHandler AccountMasterRowChanging;
            
            public event AccountMasterRowChangeEventHandler AccountMasterRowChanged;
            
            public event AccountMasterRowChangeEventHandler AccountMasterRowDeleting;
            
            public event AccountMasterRowChangeEventHandler AccountMasterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAccountMasterRow(AccountMasterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow AddAccountMasterRow(
                        decimal Acc_No, 
                        decimal Reference_No, 
                        string Name, 
                        System.DateTime Opening_Date, 
                        System.DateTime BirthDate, 
                        string Acc_type, 
                        string Res_Add, 
                        string Off_Add, 
                        decimal IncomeTax_No, 
                        decimal Pan_No, 
                        int JointHolder, 
                        string Minor, 
                        decimal Phone_No, 
                        string Nationality, 
                        string Occupation, 
                        string Education, 
                        string Sex) {
                AccountMasterRow rowAccountMasterRow = ((AccountMasterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Acc_No,
                        Reference_No,
                        Name,
                        Opening_Date,
                        BirthDate,
                        Acc_type,
                        Res_Add,
                        Off_Add,
                        IncomeTax_No,
                        Pan_No,
                        JointHolder,
                        Minor,
                        Phone_No,
                        Nationality,
                        Occupation,
                        Education,
                        Sex};
                rowAccountMasterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAccountMasterRow);
                return rowAccountMasterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow FindByAcc_No(decimal Acc_No) {
                return ((AccountMasterRow)(this.Rows.Find(new object[] {
                            Acc_No})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AccountMasterDataTable cln = ((AccountMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AccountMasterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAcc_No = base.Columns["Acc_No"];
                this.columnReference_No = base.Columns["Reference_No"];
                this.columnName = base.Columns["Name"];
                this.columnOpening_Date = base.Columns["Opening_Date"];
                this.columnBirthDate = base.Columns["BirthDate"];
                this.columnAcc_type = base.Columns["Acc_type"];
                this.columnRes_Add = base.Columns["Res_Add"];
                this.columnOff_Add = base.Columns["Off_Add"];
                this.columnIncomeTax_No = base.Columns["IncomeTax_No"];
                this.columnPan_No = base.Columns["Pan_No"];
                this.columnJointHolder = base.Columns["JointHolder"];
                this.columnMinor = base.Columns["Minor"];
                this.columnPhone_No = base.Columns["Phone_No"];
                this.columnNationality = base.Columns["Nationality"];
                this.columnOccupation = base.Columns["Occupation"];
                this.columnEducation = base.Columns["Education"];
                this.columnSex = base.Columns["Sex"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAcc_No = new global::System.Data.DataColumn("Acc_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcc_No);
                this.columnReference_No = new global::System.Data.DataColumn("Reference_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReference_No);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnOpening_Date = new global::System.Data.DataColumn("Opening_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpening_Date);
                this.columnBirthDate = new global::System.Data.DataColumn("BirthDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthDate);
                this.columnAcc_type = new global::System.Data.DataColumn("Acc_type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcc_type);
                this.columnRes_Add = new global::System.Data.DataColumn("Res_Add", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRes_Add);
                this.columnOff_Add = new global::System.Data.DataColumn("Off_Add", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOff_Add);
                this.columnIncomeTax_No = new global::System.Data.DataColumn("IncomeTax_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeTax_No);
                this.columnPan_No = new global::System.Data.DataColumn("Pan_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPan_No);
                this.columnJointHolder = new global::System.Data.DataColumn("JointHolder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJointHolder);
                this.columnMinor = new global::System.Data.DataColumn("Minor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinor);
                this.columnPhone_No = new global::System.Data.DataColumn("Phone_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone_No);
                this.columnNationality = new global::System.Data.DataColumn("Nationality", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNationality);
                this.columnOccupation = new global::System.Data.DataColumn("Occupation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccupation);
                this.columnEducation = new global::System.Data.DataColumn("Education", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEducation);
                this.columnSex = new global::System.Data.DataColumn("Sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSex);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAcc_No}, true));
                this.columnAcc_No.AllowDBNull = false;
                this.columnAcc_No.Unique = true;
                this.columnReference_No.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnOpening_Date.AllowDBNull = false;
                this.columnBirthDate.AllowDBNull = false;
                this.columnAcc_type.AllowDBNull = false;
                this.columnAcc_type.MaxLength = 10;
                this.columnRes_Add.AllowDBNull = false;
                this.columnRes_Add.MaxLength = 50;
                this.columnOff_Add.MaxLength = 50;
                this.columnJointHolder.AllowDBNull = false;
                this.columnMinor.AllowDBNull = false;
                this.columnMinor.MaxLength = 50;
                this.columnPhone_No.AllowDBNull = false;
                this.columnNationality.AllowDBNull = false;
                this.columnNationality.MaxLength = 50;
                this.columnOccupation.AllowDBNull = false;
                this.columnOccupation.MaxLength = 50;
                this.columnEducation.AllowDBNull = false;
                this.columnEducation.MaxLength = 50;
                this.columnSex.AllowDBNull = false;
                this.columnSex.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow NewAccountMasterRow() {
                return ((AccountMasterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AccountMasterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AccountMasterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountMasterRowChanged != null)) {
                    this.AccountMasterRowChanged(this, new AccountMasterRowChangeEvent(((AccountMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountMasterRowChanging != null)) {
                    this.AccountMasterRowChanging(this, new AccountMasterRowChangeEvent(((AccountMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountMasterRowDeleted != null)) {
                    this.AccountMasterRowDeleted(this, new AccountMasterRowChangeEvent(((AccountMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountMasterRowDeleting != null)) {
                    this.AccountMasterRowDeleting(this, new AccountMasterRowChangeEvent(((AccountMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAccountMasterRow(AccountMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AccountMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ChequeBookDataTable : global::System.Data.TypedTableBase<ChequeBookRow> {
            
            private global::System.Data.DataColumn columnAcc_No;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnChq_No_From;
            
            private global::System.Data.DataColumn columnChq_No_To;
            
            private global::System.Data.DataColumn columnChqID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChequeBookDataTable() {
                this.TableName = "ChequeBook";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChequeBookDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ChequeBookDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Acc_NoColumn {
                get {
                    return this.columnAcc_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Chq_No_FromColumn {
                get {
                    return this.columnChq_No_From;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Chq_No_ToColumn {
                get {
                    return this.columnChq_No_To;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChqIDColumn {
                get {
                    return this.columnChqID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChequeBookRow this[int index] {
                get {
                    return ((ChequeBookRow)(this.Rows[index]));
                }
            }
            
            public event ChequeBookRowChangeEventHandler ChequeBookRowChanging;
            
            public event ChequeBookRowChangeEventHandler ChequeBookRowChanged;
            
            public event ChequeBookRowChangeEventHandler ChequeBookRowDeleting;
            
            public event ChequeBookRowChangeEventHandler ChequeBookRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddChequeBookRow(ChequeBookRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChequeBookRow AddChequeBookRow(AccountMasterRow parentAccountMasterRowByFK_ChequeBook_AccountMaster, string Name, decimal Quantity, decimal Chq_No_From, decimal Chq_No_To, string ChqID) {
                ChequeBookRow rowChequeBookRow = ((ChequeBookRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Quantity,
                        Chq_No_From,
                        Chq_No_To,
                        ChqID};
                if ((parentAccountMasterRowByFK_ChequeBook_AccountMaster != null)) {
                    columnValuesArray[0] = parentAccountMasterRowByFK_ChequeBook_AccountMaster[0];
                }
                rowChequeBookRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowChequeBookRow);
                return rowChequeBookRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChequeBookRow FindByChqID(string ChqID) {
                return ((ChequeBookRow)(this.Rows.Find(new object[] {
                            ChqID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ChequeBookDataTable cln = ((ChequeBookDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ChequeBookDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAcc_No = base.Columns["Acc_No"];
                this.columnName = base.Columns["Name"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnChq_No_From = base.Columns["Chq_No_From"];
                this.columnChq_No_To = base.Columns["Chq_No_To"];
                this.columnChqID = base.Columns["ChqID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAcc_No = new global::System.Data.DataColumn("Acc_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcc_No);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnChq_No_From = new global::System.Data.DataColumn("Chq_No_From", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChq_No_From);
                this.columnChq_No_To = new global::System.Data.DataColumn("Chq_No_To", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChq_No_To);
                this.columnChqID = new global::System.Data.DataColumn("ChqID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChqID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnChqID}, true));
                this.columnAcc_No.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnQuantity.AllowDBNull = false;
                this.columnChq_No_From.AllowDBNull = false;
                this.columnChq_No_To.AllowDBNull = false;
                this.columnChqID.AllowDBNull = false;
                this.columnChqID.Unique = true;
                this.columnChqID.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChequeBookRow NewChequeBookRow() {
                return ((ChequeBookRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ChequeBookRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ChequeBookRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChequeBookRowChanged != null)) {
                    this.ChequeBookRowChanged(this, new ChequeBookRowChangeEvent(((ChequeBookRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChequeBookRowChanging != null)) {
                    this.ChequeBookRowChanging(this, new ChequeBookRowChangeEvent(((ChequeBookRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChequeBookRowDeleted != null)) {
                    this.ChequeBookRowDeleted(this, new ChequeBookRowChangeEvent(((ChequeBookRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChequeBookRowDeleting != null)) {
                    this.ChequeBookRowDeleting(this, new ChequeBookRowChangeEvent(((ChequeBookRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveChequeBookRow(ChequeBookRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ChequeBookDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FixedDepositeDataTable : global::System.Data.TypedTableBase<FixedDepositeRow> {
            
            private global::System.Data.DataColumn columnAcc_No;
            
            private global::System.Data.DataColumn columnAmt;
            
            private global::System.Data.DataColumn columnInterest_Rate;
            
            private global::System.Data.DataColumn columnDate_From;
            
            private global::System.Data.DataColumn columnDate_To;
            
            private global::System.Data.DataColumn columnFD_ID;
            
            private global::System.Data.DataColumn columnDuration;
            
            private global::System.Data.DataColumn columnAmt_After_Due_Date;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixedDepositeDataTable() {
                this.TableName = "FixedDeposite";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FixedDepositeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FixedDepositeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Acc_NoColumn {
                get {
                    return this.columnAcc_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmtColumn {
                get {
                    return this.columnAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Interest_RateColumn {
                get {
                    return this.columnInterest_Rate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_FromColumn {
                get {
                    return this.columnDate_From;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_ToColumn {
                get {
                    return this.columnDate_To;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FD_IDColumn {
                get {
                    return this.columnFD_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amt_After_Due_DateColumn {
                get {
                    return this.columnAmt_After_Due_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixedDepositeRow this[int index] {
                get {
                    return ((FixedDepositeRow)(this.Rows[index]));
                }
            }
            
            public event FixedDepositeRowChangeEventHandler FixedDepositeRowChanging;
            
            public event FixedDepositeRowChangeEventHandler FixedDepositeRowChanged;
            
            public event FixedDepositeRowChangeEventHandler FixedDepositeRowDeleting;
            
            public event FixedDepositeRowChangeEventHandler FixedDepositeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFixedDepositeRow(FixedDepositeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixedDepositeRow AddFixedDepositeRow(AccountMasterRow parentAccountMasterRowByFK_FixedDeposite_AccountMaster, decimal Amt, decimal Interest_Rate, System.DateTime Date_From, System.DateTime Date_To, long FD_ID, decimal Duration, decimal Amt_After_Due_Date) {
                FixedDepositeRow rowFixedDepositeRow = ((FixedDepositeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Amt,
                        Interest_Rate,
                        Date_From,
                        Date_To,
                        FD_ID,
                        Duration,
                        Amt_After_Due_Date};
                if ((parentAccountMasterRowByFK_FixedDeposite_AccountMaster != null)) {
                    columnValuesArray[0] = parentAccountMasterRowByFK_FixedDeposite_AccountMaster[0];
                }
                rowFixedDepositeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFixedDepositeRow);
                return rowFixedDepositeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixedDepositeRow FindByFD_ID(long FD_ID) {
                return ((FixedDepositeRow)(this.Rows.Find(new object[] {
                            FD_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FixedDepositeDataTable cln = ((FixedDepositeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FixedDepositeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAcc_No = base.Columns["Acc_No"];
                this.columnAmt = base.Columns["Amt"];
                this.columnInterest_Rate = base.Columns["Interest_Rate"];
                this.columnDate_From = base.Columns["Date_From"];
                this.columnDate_To = base.Columns["Date_To"];
                this.columnFD_ID = base.Columns["FD_ID"];
                this.columnDuration = base.Columns["Duration"];
                this.columnAmt_After_Due_Date = base.Columns["Amt_After_Due_Date"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAcc_No = new global::System.Data.DataColumn("Acc_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcc_No);
                this.columnAmt = new global::System.Data.DataColumn("Amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmt);
                this.columnInterest_Rate = new global::System.Data.DataColumn("Interest_Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterest_Rate);
                this.columnDate_From = new global::System.Data.DataColumn("Date_From", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_From);
                this.columnDate_To = new global::System.Data.DataColumn("Date_To", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_To);
                this.columnFD_ID = new global::System.Data.DataColumn("FD_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFD_ID);
                this.columnDuration = new global::System.Data.DataColumn("Duration", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuration);
                this.columnAmt_After_Due_Date = new global::System.Data.DataColumn("Amt_After_Due_Date", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmt_After_Due_Date);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFD_ID}, true));
                this.columnAcc_No.AllowDBNull = false;
                this.columnAmt.AllowDBNull = false;
                this.columnInterest_Rate.AllowDBNull = false;
                this.columnDate_From.AllowDBNull = false;
                this.columnDate_To.AllowDBNull = false;
                this.columnFD_ID.AllowDBNull = false;
                this.columnFD_ID.Unique = true;
                this.columnDuration.AllowDBNull = false;
                this.columnAmt_After_Due_Date.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixedDepositeRow NewFixedDepositeRow() {
                return ((FixedDepositeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FixedDepositeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FixedDepositeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FixedDepositeRowChanged != null)) {
                    this.FixedDepositeRowChanged(this, new FixedDepositeRowChangeEvent(((FixedDepositeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FixedDepositeRowChanging != null)) {
                    this.FixedDepositeRowChanging(this, new FixedDepositeRowChangeEvent(((FixedDepositeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FixedDepositeRowDeleted != null)) {
                    this.FixedDepositeRowDeleted(this, new FixedDepositeRowChangeEvent(((FixedDepositeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FixedDepositeRowDeleting != null)) {
                    this.FixedDepositeRowDeleting(this, new FixedDepositeRowChangeEvent(((FixedDepositeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFixedDepositeRow(FixedDepositeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FixedDepositeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GuarantorDataTable : global::System.Data.TypedTableBase<GuarantorRow> {
            
            private global::System.Data.DataColumn columnGId;
            
            private global::System.Data.DataColumn columnGName;
            
            private global::System.Data.DataColumn columnBirthDate;
            
            private global::System.Data.DataColumn columnRes_Add;
            
            private global::System.Data.DataColumn columnOff_Add;
            
            private global::System.Data.DataColumn columnPhone_No;
            
            private global::System.Data.DataColumn columnOccupation;
            
            private global::System.Data.DataColumn columnAcc_No;
            
            private global::System.Data.DataColumn columnAppNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GuarantorDataTable() {
                this.TableName = "Guarantor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GuarantorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GuarantorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GIdColumn {
                get {
                    return this.columnGId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GNameColumn {
                get {
                    return this.columnGName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BirthDateColumn {
                get {
                    return this.columnBirthDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Res_AddColumn {
                get {
                    return this.columnRes_Add;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Off_AddColumn {
                get {
                    return this.columnOff_Add;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone_NoColumn {
                get {
                    return this.columnPhone_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccupationColumn {
                get {
                    return this.columnOccupation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Acc_NoColumn {
                get {
                    return this.columnAcc_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppNoColumn {
                get {
                    return this.columnAppNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GuarantorRow this[int index] {
                get {
                    return ((GuarantorRow)(this.Rows[index]));
                }
            }
            
            public event GuarantorRowChangeEventHandler GuarantorRowChanging;
            
            public event GuarantorRowChangeEventHandler GuarantorRowChanged;
            
            public event GuarantorRowChangeEventHandler GuarantorRowDeleting;
            
            public event GuarantorRowChangeEventHandler GuarantorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGuarantorRow(GuarantorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GuarantorRow AddGuarantorRow(decimal GId, string GName, System.DateTime BirthDate, string Res_Add, string Off_Add, decimal Phone_No, string Occupation, AccountMasterRow parentAccountMasterRowByFK_Guarantor_AccountMaster, decimal AppNo) {
                GuarantorRow rowGuarantorRow = ((GuarantorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GId,
                        GName,
                        BirthDate,
                        Res_Add,
                        Off_Add,
                        Phone_No,
                        Occupation,
                        null,
                        AppNo};
                if ((parentAccountMasterRowByFK_Guarantor_AccountMaster != null)) {
                    columnValuesArray[7] = parentAccountMasterRowByFK_Guarantor_AccountMaster[0];
                }
                rowGuarantorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGuarantorRow);
                return rowGuarantorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GuarantorRow FindByGId(decimal GId) {
                return ((GuarantorRow)(this.Rows.Find(new object[] {
                            GId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GuarantorDataTable cln = ((GuarantorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GuarantorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGId = base.Columns["GId"];
                this.columnGName = base.Columns["GName"];
                this.columnBirthDate = base.Columns["BirthDate"];
                this.columnRes_Add = base.Columns["Res_Add"];
                this.columnOff_Add = base.Columns["Off_Add"];
                this.columnPhone_No = base.Columns["Phone_No"];
                this.columnOccupation = base.Columns["Occupation"];
                this.columnAcc_No = base.Columns["Acc_No"];
                this.columnAppNo = base.Columns["AppNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGId = new global::System.Data.DataColumn("GId", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGId);
                this.columnGName = new global::System.Data.DataColumn("GName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGName);
                this.columnBirthDate = new global::System.Data.DataColumn("BirthDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthDate);
                this.columnRes_Add = new global::System.Data.DataColumn("Res_Add", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRes_Add);
                this.columnOff_Add = new global::System.Data.DataColumn("Off_Add", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOff_Add);
                this.columnPhone_No = new global::System.Data.DataColumn("Phone_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone_No);
                this.columnOccupation = new global::System.Data.DataColumn("Occupation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccupation);
                this.columnAcc_No = new global::System.Data.DataColumn("Acc_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcc_No);
                this.columnAppNo = new global::System.Data.DataColumn("AppNo", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnGId}, true));
                this.columnGId.AllowDBNull = false;
                this.columnGId.Unique = true;
                this.columnGName.AllowDBNull = false;
                this.columnGName.MaxLength = 50;
                this.columnBirthDate.AllowDBNull = false;
                this.columnRes_Add.AllowDBNull = false;
                this.columnRes_Add.MaxLength = 50;
                this.columnOff_Add.MaxLength = 50;
                this.columnPhone_No.AllowDBNull = false;
                this.columnOccupation.MaxLength = 50;
                this.columnAppNo.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GuarantorRow NewGuarantorRow() {
                return ((GuarantorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GuarantorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GuarantorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GuarantorRowChanged != null)) {
                    this.GuarantorRowChanged(this, new GuarantorRowChangeEvent(((GuarantorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GuarantorRowChanging != null)) {
                    this.GuarantorRowChanging(this, new GuarantorRowChangeEvent(((GuarantorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GuarantorRowDeleted != null)) {
                    this.GuarantorRowDeleted(this, new GuarantorRowChangeEvent(((GuarantorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GuarantorRowDeleting != null)) {
                    this.GuarantorRowDeleting(this, new GuarantorRowChangeEvent(((GuarantorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGuarantorRow(GuarantorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GuarantorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LockerDataTable : global::System.Data.TypedTableBase<LockerRow> {
            
            private global::System.Data.DataColumn columnAcc_No;
            
            private global::System.Data.DataColumn columnOpeningDate;
            
            private global::System.Data.DataColumn columnDeposit_Amt;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnLockerNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerDataTable() {
                this.TableName = "Locker";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LockerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LockerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Acc_NoColumn {
                get {
                    return this.columnAcc_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpeningDateColumn {
                get {
                    return this.columnOpeningDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Deposit_AmtColumn {
                get {
                    return this.columnDeposit_Amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LockerNoColumn {
                get {
                    return this.columnLockerNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow this[int index] {
                get {
                    return ((LockerRow)(this.Rows[index]));
                }
            }
            
            public event LockerRowChangeEventHandler LockerRowChanging;
            
            public event LockerRowChangeEventHandler LockerRowChanged;
            
            public event LockerRowChangeEventHandler LockerRowDeleting;
            
            public event LockerRowChangeEventHandler LockerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLockerRow(LockerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow AddLockerRow(AccountMasterRow parentAccountMasterRowByFK_Locker_AccountMaster, System.DateTime OpeningDate, decimal Deposit_Amt, string Active, decimal LockerNo) {
                LockerRow rowLockerRow = ((LockerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        OpeningDate,
                        Deposit_Amt,
                        Active,
                        LockerNo};
                if ((parentAccountMasterRowByFK_Locker_AccountMaster != null)) {
                    columnValuesArray[0] = parentAccountMasterRowByFK_Locker_AccountMaster[0];
                }
                rowLockerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLockerRow);
                return rowLockerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow FindByLockerNo(decimal LockerNo) {
                return ((LockerRow)(this.Rows.Find(new object[] {
                            LockerNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LockerDataTable cln = ((LockerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LockerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAcc_No = base.Columns["Acc_No"];
                this.columnOpeningDate = base.Columns["OpeningDate"];
                this.columnDeposit_Amt = base.Columns["Deposit_Amt"];
                this.columnActive = base.Columns["Active"];
                this.columnLockerNo = base.Columns["LockerNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAcc_No = new global::System.Data.DataColumn("Acc_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcc_No);
                this.columnOpeningDate = new global::System.Data.DataColumn("OpeningDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpeningDate);
                this.columnDeposit_Amt = new global::System.Data.DataColumn("Deposit_Amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeposit_Amt);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnLockerNo = new global::System.Data.DataColumn("LockerNo", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockerNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLockerNo}, true));
                this.columnAcc_No.AllowDBNull = false;
                this.columnOpeningDate.AllowDBNull = false;
                this.columnDeposit_Amt.AllowDBNull = false;
                this.columnActive.AllowDBNull = false;
                this.columnActive.MaxLength = 10;
                this.columnLockerNo.AllowDBNull = false;
                this.columnLockerNo.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow NewLockerRow() {
                return ((LockerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LockerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LockerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LockerRowChanged != null)) {
                    this.LockerRowChanged(this, new LockerRowChangeEvent(((LockerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LockerRowChanging != null)) {
                    this.LockerRowChanging(this, new LockerRowChangeEvent(((LockerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LockerRowDeleted != null)) {
                    this.LockerRowDeleted(this, new LockerRowChangeEvent(((LockerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LockerRowDeleting != null)) {
                    this.LockerRowDeleting(this, new LockerRowChangeEvent(((LockerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLockerRow(LockerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LockerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PasswordMasterDataTable : global::System.Data.TypedTableBase<PasswordMasterRow> {
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnUserpassword;
            
            private global::System.Data.DataColumn columnDateOfCreated;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PasswordMasterDataTable() {
                this.TableName = "PasswordMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PasswordMasterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PasswordMasterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserpasswordColumn {
                get {
                    return this.columnUserpassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOfCreatedColumn {
                get {
                    return this.columnDateOfCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PasswordMasterRow this[int index] {
                get {
                    return ((PasswordMasterRow)(this.Rows[index]));
                }
            }
            
            public event PasswordMasterRowChangeEventHandler PasswordMasterRowChanging;
            
            public event PasswordMasterRowChangeEventHandler PasswordMasterRowChanged;
            
            public event PasswordMasterRowChangeEventHandler PasswordMasterRowDeleting;
            
            public event PasswordMasterRowChangeEventHandler PasswordMasterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPasswordMasterRow(PasswordMasterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PasswordMasterRow AddPasswordMasterRow(string UserId, string Userpassword, System.DateTime DateOfCreated) {
                PasswordMasterRow rowPasswordMasterRow = ((PasswordMasterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserId,
                        Userpassword,
                        DateOfCreated};
                rowPasswordMasterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPasswordMasterRow);
                return rowPasswordMasterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PasswordMasterRow FindByUserId(string UserId) {
                return ((PasswordMasterRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PasswordMasterDataTable cln = ((PasswordMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PasswordMasterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnUserpassword = base.Columns["Userpassword"];
                this.columnDateOfCreated = base.Columns["DateOfCreated"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnUserpassword = new global::System.Data.DataColumn("Userpassword", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserpassword);
                this.columnDateOfCreated = new global::System.Data.DataColumn("DateOfCreated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfCreated);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.Unique = true;
                this.columnUserId.MaxLength = 10;
                this.columnUserpassword.AllowDBNull = false;
                this.columnUserpassword.MaxLength = 10;
                this.columnDateOfCreated.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PasswordMasterRow NewPasswordMasterRow() {
                return ((PasswordMasterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PasswordMasterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PasswordMasterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PasswordMasterRowChanged != null)) {
                    this.PasswordMasterRowChanged(this, new PasswordMasterRowChangeEvent(((PasswordMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PasswordMasterRowChanging != null)) {
                    this.PasswordMasterRowChanging(this, new PasswordMasterRowChangeEvent(((PasswordMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PasswordMasterRowDeleted != null)) {
                    this.PasswordMasterRowDeleted(this, new PasswordMasterRowChangeEvent(((PasswordMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PasswordMasterRowDeleting != null)) {
                    this.PasswordMasterRowDeleting(this, new PasswordMasterRowChangeEvent(((PasswordMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePasswordMasterRow(PasswordMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PasswordMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MinorDataTable : global::System.Data.TypedTableBase<MinorRow> {
            
            private global::System.Data.DataColumn columnNameofparent;
            
            private global::System.Data.DataColumn columnBirthDate;
            
            private global::System.Data.DataColumn columnRes_Add;
            
            private global::System.Data.DataColumn columnOff_Add;
            
            private global::System.Data.DataColumn columnOccupation;
            
            private global::System.Data.DataColumn columnRelation;
            
            private global::System.Data.DataColumn columnMinorId;
            
            private global::System.Data.DataColumn columnAccNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MinorDataTable() {
                this.TableName = "Minor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MinorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MinorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameofparentColumn {
                get {
                    return this.columnNameofparent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BirthDateColumn {
                get {
                    return this.columnBirthDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Res_AddColumn {
                get {
                    return this.columnRes_Add;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Off_AddColumn {
                get {
                    return this.columnOff_Add;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccupationColumn {
                get {
                    return this.columnOccupation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelationColumn {
                get {
                    return this.columnRelation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinorIdColumn {
                get {
                    return this.columnMinorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccNoColumn {
                get {
                    return this.columnAccNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MinorRow this[int index] {
                get {
                    return ((MinorRow)(this.Rows[index]));
                }
            }
            
            public event MinorRowChangeEventHandler MinorRowChanging;
            
            public event MinorRowChangeEventHandler MinorRowChanged;
            
            public event MinorRowChangeEventHandler MinorRowDeleting;
            
            public event MinorRowChangeEventHandler MinorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMinorRow(MinorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MinorRow AddMinorRow(string Nameofparent, System.DateTime BirthDate, string Res_Add, string Off_Add, string Occupation, string Relation, decimal MinorId, AccountMasterRow parentAccountMasterRowByFK_Minor_AccountMaster) {
                MinorRow rowMinorRow = ((MinorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Nameofparent,
                        BirthDate,
                        Res_Add,
                        Off_Add,
                        Occupation,
                        Relation,
                        MinorId,
                        null};
                if ((parentAccountMasterRowByFK_Minor_AccountMaster != null)) {
                    columnValuesArray[7] = parentAccountMasterRowByFK_Minor_AccountMaster[0];
                }
                rowMinorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMinorRow);
                return rowMinorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MinorRow FindByMinorId(decimal MinorId) {
                return ((MinorRow)(this.Rows.Find(new object[] {
                            MinorId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MinorDataTable cln = ((MinorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MinorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNameofparent = base.Columns["Nameofparent"];
                this.columnBirthDate = base.Columns["BirthDate"];
                this.columnRes_Add = base.Columns["Res_Add"];
                this.columnOff_Add = base.Columns["Off_Add"];
                this.columnOccupation = base.Columns["Occupation"];
                this.columnRelation = base.Columns["Relation"];
                this.columnMinorId = base.Columns["MinorId"];
                this.columnAccNo = base.Columns["AccNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNameofparent = new global::System.Data.DataColumn("Nameofparent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameofparent);
                this.columnBirthDate = new global::System.Data.DataColumn("BirthDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthDate);
                this.columnRes_Add = new global::System.Data.DataColumn("Res_Add", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRes_Add);
                this.columnOff_Add = new global::System.Data.DataColumn("Off_Add", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOff_Add);
                this.columnOccupation = new global::System.Data.DataColumn("Occupation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccupation);
                this.columnRelation = new global::System.Data.DataColumn("Relation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelation);
                this.columnMinorId = new global::System.Data.DataColumn("MinorId", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinorId);
                this.columnAccNo = new global::System.Data.DataColumn("AccNo", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMinorId}, true));
                this.columnNameofparent.AllowDBNull = false;
                this.columnNameofparent.MaxLength = 50;
                this.columnBirthDate.AllowDBNull = false;
                this.columnRes_Add.AllowDBNull = false;
                this.columnRes_Add.MaxLength = 50;
                this.columnOff_Add.MaxLength = 50;
                this.columnOccupation.MaxLength = 50;
                this.columnRelation.AllowDBNull = false;
                this.columnRelation.MaxLength = 50;
                this.columnMinorId.AllowDBNull = false;
                this.columnMinorId.Unique = true;
                this.columnAccNo.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MinorRow NewMinorRow() {
                return ((MinorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MinorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MinorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MinorRowChanged != null)) {
                    this.MinorRowChanged(this, new MinorRowChangeEvent(((MinorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MinorRowChanging != null)) {
                    this.MinorRowChanging(this, new MinorRowChangeEvent(((MinorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MinorRowDeleted != null)) {
                    this.MinorRowDeleted(this, new MinorRowChangeEvent(((MinorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MinorRowDeleting != null)) {
                    this.MinorRowDeleting(this, new MinorRowChangeEvent(((MinorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMinorRow(MinorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MinorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HomeStudentLoanDataTable : global::System.Data.TypedTableBase<HomeStudentLoanRow> {
            
            private global::System.Data.DataColumn columnAppNo;
            
            private global::System.Data.DataColumn columnAcc_No;
            
            private global::System.Data.DataColumn columnTargetPropertyAddress;
            
            private global::System.Data.DataColumn columnSavingAmt;
            
            private global::System.Data.DataColumn columnProvidentAmt;
            
            private global::System.Data.DataColumn columnimmovableAmt;
            
            private global::System.Data.DataColumn columnLIC_No;
            
            private global::System.Data.DataColumn columnLICAmt;
            
            private global::System.Data.DataColumn columnLICMaturityDate;
            
            private global::System.Data.DataColumn columnAppDate;
            
            private global::System.Data.DataColumn columnLoanAmt;
            
            private global::System.Data.DataColumn columnIntrate;
            
            private global::System.Data.DataColumn columnEMI;
            
            private global::System.Data.DataColumn columnLoanType;
            
            private global::System.Data.DataColumn columnSalary;
            
            private global::System.Data.DataColumn columnNo_Of_Installment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HomeStudentLoanDataTable() {
                this.TableName = "HomeStudentLoan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HomeStudentLoanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HomeStudentLoanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppNoColumn {
                get {
                    return this.columnAppNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Acc_NoColumn {
                get {
                    return this.columnAcc_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TargetPropertyAddressColumn {
                get {
                    return this.columnTargetPropertyAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SavingAmtColumn {
                get {
                    return this.columnSavingAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProvidentAmtColumn {
                get {
                    return this.columnProvidentAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn immovableAmtColumn {
                get {
                    return this.columnimmovableAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIC_NoColumn {
                get {
                    return this.columnLIC_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LICAmtColumn {
                get {
                    return this.columnLICAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LICMaturityDateColumn {
                get {
                    return this.columnLICMaturityDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppDateColumn {
                get {
                    return this.columnAppDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanAmtColumn {
                get {
                    return this.columnLoanAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IntrateColumn {
                get {
                    return this.columnIntrate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMIColumn {
                get {
                    return this.columnEMI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanTypeColumn {
                get {
                    return this.columnLoanType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalaryColumn {
                get {
                    return this.columnSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn No_Of_InstallmentColumn {
                get {
                    return this.columnNo_Of_Installment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HomeStudentLoanRow this[int index] {
                get {
                    return ((HomeStudentLoanRow)(this.Rows[index]));
                }
            }
            
            public event HomeStudentLoanRowChangeEventHandler HomeStudentLoanRowChanging;
            
            public event HomeStudentLoanRowChangeEventHandler HomeStudentLoanRowChanged;
            
            public event HomeStudentLoanRowChangeEventHandler HomeStudentLoanRowDeleting;
            
            public event HomeStudentLoanRowChangeEventHandler HomeStudentLoanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHomeStudentLoanRow(HomeStudentLoanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HomeStudentLoanRow AddHomeStudentLoanRow(
                        decimal AppNo, 
                        AccountMasterRow parentAccountMasterRowByFK_HomeStudentLoan_AccountMaster, 
                        string TargetPropertyAddress, 
                        decimal SavingAmt, 
                        decimal ProvidentAmt, 
                        decimal immovableAmt, 
                        decimal LIC_No, 
                        decimal LICAmt, 
                        System.DateTime LICMaturityDate, 
                        System.DateTime AppDate, 
                        decimal LoanAmt, 
                        decimal Intrate, 
                        decimal EMI, 
                        string LoanType, 
                        decimal Salary, 
                        decimal No_Of_Installment) {
                HomeStudentLoanRow rowHomeStudentLoanRow = ((HomeStudentLoanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AppNo,
                        null,
                        TargetPropertyAddress,
                        SavingAmt,
                        ProvidentAmt,
                        immovableAmt,
                        LIC_No,
                        LICAmt,
                        LICMaturityDate,
                        AppDate,
                        LoanAmt,
                        Intrate,
                        EMI,
                        LoanType,
                        Salary,
                        No_Of_Installment};
                if ((parentAccountMasterRowByFK_HomeStudentLoan_AccountMaster != null)) {
                    columnValuesArray[1] = parentAccountMasterRowByFK_HomeStudentLoan_AccountMaster[0];
                }
                rowHomeStudentLoanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHomeStudentLoanRow);
                return rowHomeStudentLoanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HomeStudentLoanRow FindByAppNo(decimal AppNo) {
                return ((HomeStudentLoanRow)(this.Rows.Find(new object[] {
                            AppNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HomeStudentLoanDataTable cln = ((HomeStudentLoanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HomeStudentLoanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAppNo = base.Columns["AppNo"];
                this.columnAcc_No = base.Columns["Acc_No"];
                this.columnTargetPropertyAddress = base.Columns["TargetPropertyAddress"];
                this.columnSavingAmt = base.Columns["SavingAmt"];
                this.columnProvidentAmt = base.Columns["ProvidentAmt"];
                this.columnimmovableAmt = base.Columns["immovableAmt"];
                this.columnLIC_No = base.Columns["LIC_No"];
                this.columnLICAmt = base.Columns["LICAmt"];
                this.columnLICMaturityDate = base.Columns["LICMaturityDate"];
                this.columnAppDate = base.Columns["AppDate"];
                this.columnLoanAmt = base.Columns["LoanAmt"];
                this.columnIntrate = base.Columns["Intrate"];
                this.columnEMI = base.Columns["EMI"];
                this.columnLoanType = base.Columns["LoanType"];
                this.columnSalary = base.Columns["Salary"];
                this.columnNo_Of_Installment = base.Columns["No_Of_Installment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAppNo = new global::System.Data.DataColumn("AppNo", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppNo);
                this.columnAcc_No = new global::System.Data.DataColumn("Acc_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcc_No);
                this.columnTargetPropertyAddress = new global::System.Data.DataColumn("TargetPropertyAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetPropertyAddress);
                this.columnSavingAmt = new global::System.Data.DataColumn("SavingAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSavingAmt);
                this.columnProvidentAmt = new global::System.Data.DataColumn("ProvidentAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvidentAmt);
                this.columnimmovableAmt = new global::System.Data.DataColumn("immovableAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnimmovableAmt);
                this.columnLIC_No = new global::System.Data.DataColumn("LIC_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIC_No);
                this.columnLICAmt = new global::System.Data.DataColumn("LICAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLICAmt);
                this.columnLICMaturityDate = new global::System.Data.DataColumn("LICMaturityDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLICMaturityDate);
                this.columnAppDate = new global::System.Data.DataColumn("AppDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppDate);
                this.columnLoanAmt = new global::System.Data.DataColumn("LoanAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanAmt);
                this.columnIntrate = new global::System.Data.DataColumn("Intrate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIntrate);
                this.columnEMI = new global::System.Data.DataColumn("EMI", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMI);
                this.columnLoanType = new global::System.Data.DataColumn("LoanType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanType);
                this.columnSalary = new global::System.Data.DataColumn("Salary", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalary);
                this.columnNo_Of_Installment = new global::System.Data.DataColumn("No_Of_Installment", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo_Of_Installment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAppNo}, true));
                this.columnAppNo.AllowDBNull = false;
                this.columnAppNo.Unique = true;
                this.columnAcc_No.AllowDBNull = false;
                this.columnTargetPropertyAddress.MaxLength = 50;
                this.columnSavingAmt.AllowDBNull = false;
                this.columnProvidentAmt.AllowDBNull = false;
                this.columnimmovableAmt.AllowDBNull = false;
                this.columnAppDate.AllowDBNull = false;
                this.columnLoanAmt.AllowDBNull = false;
                this.columnIntrate.AllowDBNull = false;
                this.columnEMI.AllowDBNull = false;
                this.columnLoanType.AllowDBNull = false;
                this.columnLoanType.MaxLength = 50;
                this.columnSalary.AllowDBNull = false;
                this.columnNo_Of_Installment.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HomeStudentLoanRow NewHomeStudentLoanRow() {
                return ((HomeStudentLoanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HomeStudentLoanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HomeStudentLoanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HomeStudentLoanRowChanged != null)) {
                    this.HomeStudentLoanRowChanged(this, new HomeStudentLoanRowChangeEvent(((HomeStudentLoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HomeStudentLoanRowChanging != null)) {
                    this.HomeStudentLoanRowChanging(this, new HomeStudentLoanRowChangeEvent(((HomeStudentLoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HomeStudentLoanRowDeleted != null)) {
                    this.HomeStudentLoanRowDeleted(this, new HomeStudentLoanRowChangeEvent(((HomeStudentLoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HomeStudentLoanRowDeleting != null)) {
                    this.HomeStudentLoanRowDeleting(this, new HomeStudentLoanRowChangeEvent(((HomeStudentLoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHomeStudentLoanRow(HomeStudentLoanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HomeStudentLoanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LoanTransactionDataTable : global::System.Data.TypedTableBase<LoanTransactionRow> {
            
            private global::System.Data.DataColumn columnAccNo;
            
            private global::System.Data.DataColumn columnBalance;
            
            private global::System.Data.DataColumn columnEMI;
            
            private global::System.Data.DataColumn columnInterestrate;
            
            private global::System.Data.DataColumn columnTransactionWay;
            
            private global::System.Data.DataColumn columnLoanTransactionNo;
            
            private global::System.Data.DataColumn columnLoantype;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoanTransactionDataTable() {
                this.TableName = "LoanTransaction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoanTransactionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LoanTransactionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccNoColumn {
                get {
                    return this.columnAccNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMIColumn {
                get {
                    return this.columnEMI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InterestrateColumn {
                get {
                    return this.columnInterestrate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionWayColumn {
                get {
                    return this.columnTransactionWay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanTransactionNoColumn {
                get {
                    return this.columnLoanTransactionNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoantypeColumn {
                get {
                    return this.columnLoantype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoanTransactionRow this[int index] {
                get {
                    return ((LoanTransactionRow)(this.Rows[index]));
                }
            }
            
            public event LoanTransactionRowChangeEventHandler LoanTransactionRowChanging;
            
            public event LoanTransactionRowChangeEventHandler LoanTransactionRowChanged;
            
            public event LoanTransactionRowChangeEventHandler LoanTransactionRowDeleting;
            
            public event LoanTransactionRowChangeEventHandler LoanTransactionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLoanTransactionRow(LoanTransactionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoanTransactionRow AddLoanTransactionRow(AccountMasterRow parentAccountMasterRowByFK_LoanTransaction_AccountMaster, decimal Balance, decimal EMI, decimal Interestrate, string TransactionWay, decimal LoanTransactionNo, string Loantype) {
                LoanTransactionRow rowLoanTransactionRow = ((LoanTransactionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Balance,
                        EMI,
                        Interestrate,
                        TransactionWay,
                        LoanTransactionNo,
                        Loantype};
                if ((parentAccountMasterRowByFK_LoanTransaction_AccountMaster != null)) {
                    columnValuesArray[0] = parentAccountMasterRowByFK_LoanTransaction_AccountMaster[0];
                }
                rowLoanTransactionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLoanTransactionRow);
                return rowLoanTransactionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoanTransactionRow FindByLoanTransactionNo(decimal LoanTransactionNo) {
                return ((LoanTransactionRow)(this.Rows.Find(new object[] {
                            LoanTransactionNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LoanTransactionDataTable cln = ((LoanTransactionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LoanTransactionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAccNo = base.Columns["AccNo"];
                this.columnBalance = base.Columns["Balance"];
                this.columnEMI = base.Columns["EMI"];
                this.columnInterestrate = base.Columns["Interestrate"];
                this.columnTransactionWay = base.Columns["TransactionWay"];
                this.columnLoanTransactionNo = base.Columns["LoanTransactionNo"];
                this.columnLoantype = base.Columns["Loantype"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAccNo = new global::System.Data.DataColumn("AccNo", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccNo);
                this.columnBalance = new global::System.Data.DataColumn("Balance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalance);
                this.columnEMI = new global::System.Data.DataColumn("EMI", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMI);
                this.columnInterestrate = new global::System.Data.DataColumn("Interestrate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterestrate);
                this.columnTransactionWay = new global::System.Data.DataColumn("TransactionWay", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionWay);
                this.columnLoanTransactionNo = new global::System.Data.DataColumn("LoanTransactionNo", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanTransactionNo);
                this.columnLoantype = new global::System.Data.DataColumn("Loantype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoantype);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLoanTransactionNo}, true));
                this.columnAccNo.AllowDBNull = false;
                this.columnBalance.AllowDBNull = false;
                this.columnEMI.AllowDBNull = false;
                this.columnInterestrate.AllowDBNull = false;
                this.columnTransactionWay.AllowDBNull = false;
                this.columnTransactionWay.MaxLength = 50;
                this.columnLoanTransactionNo.AllowDBNull = false;
                this.columnLoanTransactionNo.Unique = true;
                this.columnLoantype.AllowDBNull = false;
                this.columnLoantype.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoanTransactionRow NewLoanTransactionRow() {
                return ((LoanTransactionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LoanTransactionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LoanTransactionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LoanTransactionRowChanged != null)) {
                    this.LoanTransactionRowChanged(this, new LoanTransactionRowChangeEvent(((LoanTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LoanTransactionRowChanging != null)) {
                    this.LoanTransactionRowChanging(this, new LoanTransactionRowChangeEvent(((LoanTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LoanTransactionRowDeleted != null)) {
                    this.LoanTransactionRowDeleted(this, new LoanTransactionRowChangeEvent(((LoanTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LoanTransactionRowDeleting != null)) {
                    this.LoanTransactionRowDeleting(this, new LoanTransactionRowChangeEvent(((LoanTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLoanTransactionRow(LoanTransactionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LoanTransactionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StudentLoanDataTable : global::System.Data.TypedTableBase<StudentLoanRow> {
            
            private global::System.Data.DataColumn columnAppNo;
            
            private global::System.Data.DataColumn columnAcc_No;
            
            private global::System.Data.DataColumn columnPassedYear;
            
            private global::System.Data.DataColumn columnpassedMarks;
            
            private global::System.Data.DataColumn columnDivision;
            
            private global::System.Data.DataColumn columnOtherScholarship;
            
            private global::System.Data.DataColumn columnProposedCourse;
            
            private global::System.Data.DataColumn columnDuration;
            
            private global::System.Data.DataColumn columnCollegeName;
            
            private global::System.Data.DataColumn columnCollegeAddress;
            
            private global::System.Data.DataColumn columnLoanAmt;
            
            private global::System.Data.DataColumn columnintRate;
            
            private global::System.Data.DataColumn columnEMI;
            
            private global::System.Data.DataColumn columnPassedExam;
            
            private global::System.Data.DataColumn columnTotalFees;
            
            private global::System.Data.DataColumn columnAppDate;
            
            private global::System.Data.DataColumn columnSalary;
            
            private global::System.Data.DataColumn columnNo_Of_Installment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentLoanDataTable() {
                this.TableName = "StudentLoan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StudentLoanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StudentLoanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppNoColumn {
                get {
                    return this.columnAppNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Acc_NoColumn {
                get {
                    return this.columnAcc_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PassedYearColumn {
                get {
                    return this.columnPassedYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn passedMarksColumn {
                get {
                    return this.columnpassedMarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivisionColumn {
                get {
                    return this.columnDivision;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherScholarshipColumn {
                get {
                    return this.columnOtherScholarship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProposedCourseColumn {
                get {
                    return this.columnProposedCourse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CollegeNameColumn {
                get {
                    return this.columnCollegeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CollegeAddressColumn {
                get {
                    return this.columnCollegeAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanAmtColumn {
                get {
                    return this.columnLoanAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn intRateColumn {
                get {
                    return this.columnintRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMIColumn {
                get {
                    return this.columnEMI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PassedExamColumn {
                get {
                    return this.columnPassedExam;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFeesColumn {
                get {
                    return this.columnTotalFees;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppDateColumn {
                get {
                    return this.columnAppDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalaryColumn {
                get {
                    return this.columnSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn No_Of_InstallmentColumn {
                get {
                    return this.columnNo_Of_Installment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentLoanRow this[int index] {
                get {
                    return ((StudentLoanRow)(this.Rows[index]));
                }
            }
            
            public event StudentLoanRowChangeEventHandler StudentLoanRowChanging;
            
            public event StudentLoanRowChangeEventHandler StudentLoanRowChanged;
            
            public event StudentLoanRowChangeEventHandler StudentLoanRowDeleting;
            
            public event StudentLoanRowChangeEventHandler StudentLoanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStudentLoanRow(StudentLoanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentLoanRow AddStudentLoanRow(
                        decimal AppNo, 
                        AccountMasterRow parentAccountMasterRowByFK_StudentLoan_AccountMaster, 
                        System.DateTime PassedYear, 
                        decimal passedMarks, 
                        string Division, 
                        string OtherScholarship, 
                        string ProposedCourse, 
                        decimal Duration, 
                        string CollegeName, 
                        string CollegeAddress, 
                        decimal LoanAmt, 
                        decimal intRate, 
                        decimal EMI, 
                        string PassedExam, 
                        decimal TotalFees, 
                        System.DateTime AppDate, 
                        decimal Salary, 
                        decimal No_Of_Installment) {
                StudentLoanRow rowStudentLoanRow = ((StudentLoanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AppNo,
                        null,
                        PassedYear,
                        passedMarks,
                        Division,
                        OtherScholarship,
                        ProposedCourse,
                        Duration,
                        CollegeName,
                        CollegeAddress,
                        LoanAmt,
                        intRate,
                        EMI,
                        PassedExam,
                        TotalFees,
                        AppDate,
                        Salary,
                        No_Of_Installment};
                if ((parentAccountMasterRowByFK_StudentLoan_AccountMaster != null)) {
                    columnValuesArray[1] = parentAccountMasterRowByFK_StudentLoan_AccountMaster[0];
                }
                rowStudentLoanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStudentLoanRow);
                return rowStudentLoanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentLoanRow FindByAppNo(decimal AppNo) {
                return ((StudentLoanRow)(this.Rows.Find(new object[] {
                            AppNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StudentLoanDataTable cln = ((StudentLoanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StudentLoanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAppNo = base.Columns["AppNo"];
                this.columnAcc_No = base.Columns["Acc_No"];
                this.columnPassedYear = base.Columns["PassedYear"];
                this.columnpassedMarks = base.Columns["passedMarks"];
                this.columnDivision = base.Columns["Division"];
                this.columnOtherScholarship = base.Columns["OtherScholarship"];
                this.columnProposedCourse = base.Columns["ProposedCourse"];
                this.columnDuration = base.Columns["Duration"];
                this.columnCollegeName = base.Columns["CollegeName"];
                this.columnCollegeAddress = base.Columns["CollegeAddress"];
                this.columnLoanAmt = base.Columns["LoanAmt"];
                this.columnintRate = base.Columns["intRate"];
                this.columnEMI = base.Columns["EMI"];
                this.columnPassedExam = base.Columns["PassedExam"];
                this.columnTotalFees = base.Columns["TotalFees"];
                this.columnAppDate = base.Columns["AppDate"];
                this.columnSalary = base.Columns["Salary"];
                this.columnNo_Of_Installment = base.Columns["No_Of_Installment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAppNo = new global::System.Data.DataColumn("AppNo", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppNo);
                this.columnAcc_No = new global::System.Data.DataColumn("Acc_No", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcc_No);
                this.columnPassedYear = new global::System.Data.DataColumn("PassedYear", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassedYear);
                this.columnpassedMarks = new global::System.Data.DataColumn("passedMarks", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpassedMarks);
                this.columnDivision = new global::System.Data.DataColumn("Division", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivision);
                this.columnOtherScholarship = new global::System.Data.DataColumn("OtherScholarship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherScholarship);
                this.columnProposedCourse = new global::System.Data.DataColumn("ProposedCourse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProposedCourse);
                this.columnDuration = new global::System.Data.DataColumn("Duration", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuration);
                this.columnCollegeName = new global::System.Data.DataColumn("CollegeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollegeName);
                this.columnCollegeAddress = new global::System.Data.DataColumn("CollegeAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollegeAddress);
                this.columnLoanAmt = new global::System.Data.DataColumn("LoanAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanAmt);
                this.columnintRate = new global::System.Data.DataColumn("intRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnintRate);
                this.columnEMI = new global::System.Data.DataColumn("EMI", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMI);
                this.columnPassedExam = new global::System.Data.DataColumn("PassedExam", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassedExam);
                this.columnTotalFees = new global::System.Data.DataColumn("TotalFees", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFees);
                this.columnAppDate = new global::System.Data.DataColumn("AppDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppDate);
                this.columnSalary = new global::System.Data.DataColumn("Salary", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalary);
                this.columnNo_Of_Installment = new global::System.Data.DataColumn("No_Of_Installment", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo_Of_Installment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAppNo}, true));
                this.columnAppNo.AllowDBNull = false;
                this.columnAppNo.Unique = true;
                this.columnAcc_No.AllowDBNull = false;
                this.columnPassedYear.AllowDBNull = false;
                this.columnpassedMarks.AllowDBNull = false;
                this.columnDivision.AllowDBNull = false;
                this.columnDivision.MaxLength = 50;
                this.columnOtherScholarship.AllowDBNull = false;
                this.columnOtherScholarship.MaxLength = 50;
                this.columnProposedCourse.AllowDBNull = false;
                this.columnProposedCourse.MaxLength = 50;
                this.columnDuration.AllowDBNull = false;
                this.columnCollegeName.AllowDBNull = false;
                this.columnCollegeName.MaxLength = 50;
                this.columnCollegeAddress.AllowDBNull = false;
                this.columnCollegeAddress.MaxLength = 50;
                this.columnLoanAmt.AllowDBNull = false;
                this.columnintRate.AllowDBNull = false;
                this.columnEMI.AllowDBNull = false;
                this.columnPassedExam.AllowDBNull = false;
                this.columnPassedExam.MaxLength = 50;
                this.columnTotalFees.AllowDBNull = false;
                this.columnAppDate.AllowDBNull = false;
                this.columnSalary.AllowDBNull = false;
                this.columnNo_Of_Installment.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentLoanRow NewStudentLoanRow() {
                return ((StudentLoanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StudentLoanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StudentLoanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StudentLoanRowChanged != null)) {
                    this.StudentLoanRowChanged(this, new StudentLoanRowChangeEvent(((StudentLoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StudentLoanRowChanging != null)) {
                    this.StudentLoanRowChanging(this, new StudentLoanRowChangeEvent(((StudentLoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StudentLoanRowDeleted != null)) {
                    this.StudentLoanRowDeleted(this, new StudentLoanRowChangeEvent(((StudentLoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StudentLoanRowDeleting != null)) {
                    this.StudentLoanRowDeleting(this, new StudentLoanRowChangeEvent(((StudentLoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStudentLoanRow(StudentLoanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StudentLoanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TransactionTableDataTable : global::System.Data.TypedTableBase<TransactionTableRow> {
            
            private global::System.Data.DataColumn columnAccNo;
            
            private global::System.Data.DataColumn columnTransactionNo;
            
            private global::System.Data.DataColumn columnBalance;
            
            private global::System.Data.DataColumn columnTransactionWay;
            
            private global::System.Data.DataColumn columnDeposit;
            
            private global::System.Data.DataColumn columnWithdrawl;
            
            private global::System.Data.DataColumn columnTransactionDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionTableDataTable() {
                this.TableName = "TransactionTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransactionTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TransactionTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccNoColumn {
                get {
                    return this.columnAccNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionNoColumn {
                get {
                    return this.columnTransactionNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionWayColumn {
                get {
                    return this.columnTransactionWay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepositColumn {
                get {
                    return this.columnDeposit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WithdrawlColumn {
                get {
                    return this.columnWithdrawl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionDateColumn {
                get {
                    return this.columnTransactionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionTableRow this[int index] {
                get {
                    return ((TransactionTableRow)(this.Rows[index]));
                }
            }
            
            public event TransactionTableRowChangeEventHandler TransactionTableRowChanging;
            
            public event TransactionTableRowChangeEventHandler TransactionTableRowChanged;
            
            public event TransactionTableRowChangeEventHandler TransactionTableRowDeleting;
            
            public event TransactionTableRowChangeEventHandler TransactionTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTransactionTableRow(TransactionTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionTableRow AddTransactionTableRow(AccountMasterRow parentAccountMasterRowByFK_TransactionTable_AccountMaster, decimal TransactionNo, decimal Balance, string TransactionWay, decimal Deposit, decimal Withdrawl, System.DateTime TransactionDate) {
                TransactionTableRow rowTransactionTableRow = ((TransactionTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TransactionNo,
                        Balance,
                        TransactionWay,
                        Deposit,
                        Withdrawl,
                        TransactionDate};
                if ((parentAccountMasterRowByFK_TransactionTable_AccountMaster != null)) {
                    columnValuesArray[0] = parentAccountMasterRowByFK_TransactionTable_AccountMaster[0];
                }
                rowTransactionTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTransactionTableRow);
                return rowTransactionTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionTableRow FindByTransactionNo(decimal TransactionNo) {
                return ((TransactionTableRow)(this.Rows.Find(new object[] {
                            TransactionNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TransactionTableDataTable cln = ((TransactionTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TransactionTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAccNo = base.Columns["AccNo"];
                this.columnTransactionNo = base.Columns["TransactionNo"];
                this.columnBalance = base.Columns["Balance"];
                this.columnTransactionWay = base.Columns["TransactionWay"];
                this.columnDeposit = base.Columns["Deposit"];
                this.columnWithdrawl = base.Columns["Withdrawl"];
                this.columnTransactionDate = base.Columns["TransactionDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAccNo = new global::System.Data.DataColumn("AccNo", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccNo);
                this.columnTransactionNo = new global::System.Data.DataColumn("TransactionNo", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionNo);
                this.columnBalance = new global::System.Data.DataColumn("Balance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalance);
                this.columnTransactionWay = new global::System.Data.DataColumn("TransactionWay", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionWay);
                this.columnDeposit = new global::System.Data.DataColumn("Deposit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeposit);
                this.columnWithdrawl = new global::System.Data.DataColumn("Withdrawl", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWithdrawl);
                this.columnTransactionDate = new global::System.Data.DataColumn("TransactionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTransactionNo}, true));
                this.columnAccNo.AllowDBNull = false;
                this.columnTransactionNo.AllowDBNull = false;
                this.columnTransactionNo.Unique = true;
                this.columnBalance.AllowDBNull = false;
                this.columnTransactionWay.AllowDBNull = false;
                this.columnTransactionWay.MaxLength = 50;
                this.columnTransactionDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionTableRow NewTransactionTableRow() {
                return ((TransactionTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TransactionTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TransactionTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransactionTableRowChanged != null)) {
                    this.TransactionTableRowChanged(this, new TransactionTableRowChangeEvent(((TransactionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransactionTableRowChanging != null)) {
                    this.TransactionTableRowChanging(this, new TransactionTableRowChangeEvent(((TransactionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransactionTableRowDeleted != null)) {
                    this.TransactionTableRowDeleted(this, new TransactionTableRowChangeEvent(((TransactionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransactionTableRowDeleting != null)) {
                    this.TransactionTableRowDeleting(this, new TransactionTableRowChangeEvent(((TransactionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTransactionTableRow(TransactionTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BankDataSet2 ds = new BankDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TransactionTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JointHolderRow : global::System.Data.DataRow {
            
            private JointHolderDataTable tableJointHolder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JointHolderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJointHolder = ((JointHolderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal JointHolderID {
                get {
                    return ((decimal)(this[this.tableJointHolder.JointHolderIDColumn]));
                }
                set {
                    this[this.tableJointHolder.JointHolderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BirthDate {
                get {
                    return ((global::System.DateTime)(this[this.tableJointHolder.BirthDateColumn]));
                }
                set {
                    this[this.tableJointHolder.BirthDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Phone_No {
                get {
                    return ((decimal)(this[this.tableJointHolder.Phone_NoColumn]));
                }
                set {
                    this[this.tableJointHolder.Phone_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nationality {
                get {
                    return ((string)(this[this.tableJointHolder.NationalityColumn]));
                }
                set {
                    this[this.tableJointHolder.NationalityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Res_Add {
                get {
                    return ((string)(this[this.tableJointHolder.Res_AddColumn]));
                }
                set {
                    this[this.tableJointHolder.Res_AddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Off_Add {
                get {
                    try {
                        return ((string)(this[this.tableJointHolder.Off_AddColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Off_Add\' in table \'JointHolder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJointHolder.Off_AddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] PhotoPath {
                get {
                    return ((byte[])(this[this.tableJointHolder.PhotoPathColumn]));
                }
                set {
                    this[this.tableJointHolder.PhotoPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] signPath {
                get {
                    return ((byte[])(this[this.tableJointHolder.signPathColumn]));
                }
                set {
                    this[this.tableJointHolder.signPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOff_AddNull() {
                return this.IsNull(this.tableJointHolder.Off_AddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOff_AddNull() {
                this[this.tableJointHolder.Off_AddColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AccountMasterRow : global::System.Data.DataRow {
            
            private AccountMasterDataTable tableAccountMaster;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountMasterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccountMaster = ((AccountMasterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acc_No {
                get {
                    return ((decimal)(this[this.tableAccountMaster.Acc_NoColumn]));
                }
                set {
                    this[this.tableAccountMaster.Acc_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Reference_No {
                get {
                    return ((decimal)(this[this.tableAccountMaster.Reference_NoColumn]));
                }
                set {
                    this[this.tableAccountMaster.Reference_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableAccountMaster.NameColumn]));
                }
                set {
                    this[this.tableAccountMaster.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Opening_Date {
                get {
                    return ((global::System.DateTime)(this[this.tableAccountMaster.Opening_DateColumn]));
                }
                set {
                    this[this.tableAccountMaster.Opening_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BirthDate {
                get {
                    return ((global::System.DateTime)(this[this.tableAccountMaster.BirthDateColumn]));
                }
                set {
                    this[this.tableAccountMaster.BirthDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Acc_type {
                get {
                    return ((string)(this[this.tableAccountMaster.Acc_typeColumn]));
                }
                set {
                    this[this.tableAccountMaster.Acc_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Res_Add {
                get {
                    return ((string)(this[this.tableAccountMaster.Res_AddColumn]));
                }
                set {
                    this[this.tableAccountMaster.Res_AddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Off_Add {
                get {
                    try {
                        return ((string)(this[this.tableAccountMaster.Off_AddColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Off_Add\' in table \'AccountMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountMaster.Off_AddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IncomeTax_No {
                get {
                    try {
                        return ((decimal)(this[this.tableAccountMaster.IncomeTax_NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncomeTax_No\' in table \'AccountMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountMaster.IncomeTax_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Pan_No {
                get {
                    try {
                        return ((decimal)(this[this.tableAccountMaster.Pan_NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pan_No\' in table \'AccountMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountMaster.Pan_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JointHolder {
                get {
                    return ((int)(this[this.tableAccountMaster.JointHolderColumn]));
                }
                set {
                    this[this.tableAccountMaster.JointHolderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Minor {
                get {
                    return ((string)(this[this.tableAccountMaster.MinorColumn]));
                }
                set {
                    this[this.tableAccountMaster.MinorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Phone_No {
                get {
                    return ((decimal)(this[this.tableAccountMaster.Phone_NoColumn]));
                }
                set {
                    this[this.tableAccountMaster.Phone_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nationality {
                get {
                    return ((string)(this[this.tableAccountMaster.NationalityColumn]));
                }
                set {
                    this[this.tableAccountMaster.NationalityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Occupation {
                get {
                    return ((string)(this[this.tableAccountMaster.OccupationColumn]));
                }
                set {
                    this[this.tableAccountMaster.OccupationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Education {
                get {
                    return ((string)(this[this.tableAccountMaster.EducationColumn]));
                }
                set {
                    this[this.tableAccountMaster.EducationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sex {
                get {
                    return ((string)(this[this.tableAccountMaster.SexColumn]));
                }
                set {
                    this[this.tableAccountMaster.SexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOff_AddNull() {
                return this.IsNull(this.tableAccountMaster.Off_AddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOff_AddNull() {
                this[this.tableAccountMaster.Off_AddColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomeTax_NoNull() {
                return this.IsNull(this.tableAccountMaster.IncomeTax_NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomeTax_NoNull() {
                this[this.tableAccountMaster.IncomeTax_NoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPan_NoNull() {
                return this.IsNull(this.tableAccountMaster.Pan_NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPan_NoNull() {
                this[this.tableAccountMaster.Pan_NoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChequeBookRow[] GetChequeBookRows() {
                if ((this.Table.ChildRelations["FK_ChequeBook_AccountMaster"] == null)) {
                    return new ChequeBookRow[0];
                }
                else {
                    return ((ChequeBookRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ChequeBook_AccountMaster"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixedDepositeRow[] GetFixedDepositeRows() {
                if ((this.Table.ChildRelations["FK_FixedDeposite_AccountMaster"] == null)) {
                    return new FixedDepositeRow[0];
                }
                else {
                    return ((FixedDepositeRow[])(base.GetChildRows(this.Table.ChildRelations["FK_FixedDeposite_AccountMaster"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GuarantorRow[] GetGuarantorRows() {
                if ((this.Table.ChildRelations["FK_Guarantor_AccountMaster"] == null)) {
                    return new GuarantorRow[0];
                }
                else {
                    return ((GuarantorRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Guarantor_AccountMaster"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow[] GetLockerRows() {
                if ((this.Table.ChildRelations["FK_Locker_AccountMaster"] == null)) {
                    return new LockerRow[0];
                }
                else {
                    return ((LockerRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Locker_AccountMaster"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MinorRow[] GetMinorRows() {
                if ((this.Table.ChildRelations["FK_Minor_AccountMaster"] == null)) {
                    return new MinorRow[0];
                }
                else {
                    return ((MinorRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Minor_AccountMaster"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HomeStudentLoanRow[] GetHomeStudentLoanRows() {
                if ((this.Table.ChildRelations["FK_HomeStudentLoan_AccountMaster"] == null)) {
                    return new HomeStudentLoanRow[0];
                }
                else {
                    return ((HomeStudentLoanRow[])(base.GetChildRows(this.Table.ChildRelations["FK_HomeStudentLoan_AccountMaster"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoanTransactionRow[] GetLoanTransactionRows() {
                if ((this.Table.ChildRelations["FK_LoanTransaction_AccountMaster"] == null)) {
                    return new LoanTransactionRow[0];
                }
                else {
                    return ((LoanTransactionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LoanTransaction_AccountMaster"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentLoanRow[] GetStudentLoanRows() {
                if ((this.Table.ChildRelations["FK_StudentLoan_AccountMaster"] == null)) {
                    return new StudentLoanRow[0];
                }
                else {
                    return ((StudentLoanRow[])(base.GetChildRows(this.Table.ChildRelations["FK_StudentLoan_AccountMaster"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionTableRow[] GetTransactionTableRows() {
                if ((this.Table.ChildRelations["FK_TransactionTable_AccountMaster"] == null)) {
                    return new TransactionTableRow[0];
                }
                else {
                    return ((TransactionTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TransactionTable_AccountMaster"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ChequeBookRow : global::System.Data.DataRow {
            
            private ChequeBookDataTable tableChequeBook;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChequeBookRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableChequeBook = ((ChequeBookDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acc_No {
                get {
                    return ((decimal)(this[this.tableChequeBook.Acc_NoColumn]));
                }
                set {
                    this[this.tableChequeBook.Acc_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableChequeBook.NameColumn]));
                }
                set {
                    this[this.tableChequeBook.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    return ((decimal)(this[this.tableChequeBook.QuantityColumn]));
                }
                set {
                    this[this.tableChequeBook.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Chq_No_From {
                get {
                    return ((decimal)(this[this.tableChequeBook.Chq_No_FromColumn]));
                }
                set {
                    this[this.tableChequeBook.Chq_No_FromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Chq_No_To {
                get {
                    return ((decimal)(this[this.tableChequeBook.Chq_No_ToColumn]));
                }
                set {
                    this[this.tableChequeBook.Chq_No_ToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChqID {
                get {
                    return ((string)(this[this.tableChequeBook.ChqIDColumn]));
                }
                set {
                    this[this.tableChequeBook.ChqIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow AccountMasterRow {
                get {
                    return ((AccountMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_ChequeBook_AccountMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ChequeBook_AccountMaster"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FixedDepositeRow : global::System.Data.DataRow {
            
            private FixedDepositeDataTable tableFixedDeposite;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FixedDepositeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFixedDeposite = ((FixedDepositeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acc_No {
                get {
                    return ((decimal)(this[this.tableFixedDeposite.Acc_NoColumn]));
                }
                set {
                    this[this.tableFixedDeposite.Acc_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amt {
                get {
                    return ((decimal)(this[this.tableFixedDeposite.AmtColumn]));
                }
                set {
                    this[this.tableFixedDeposite.AmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Interest_Rate {
                get {
                    return ((decimal)(this[this.tableFixedDeposite.Interest_RateColumn]));
                }
                set {
                    this[this.tableFixedDeposite.Interest_RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_From {
                get {
                    return ((global::System.DateTime)(this[this.tableFixedDeposite.Date_FromColumn]));
                }
                set {
                    this[this.tableFixedDeposite.Date_FromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_To {
                get {
                    return ((global::System.DateTime)(this[this.tableFixedDeposite.Date_ToColumn]));
                }
                set {
                    this[this.tableFixedDeposite.Date_ToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long FD_ID {
                get {
                    return ((long)(this[this.tableFixedDeposite.FD_IDColumn]));
                }
                set {
                    this[this.tableFixedDeposite.FD_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Duration {
                get {
                    return ((decimal)(this[this.tableFixedDeposite.DurationColumn]));
                }
                set {
                    this[this.tableFixedDeposite.DurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amt_After_Due_Date {
                get {
                    return ((decimal)(this[this.tableFixedDeposite.Amt_After_Due_DateColumn]));
                }
                set {
                    this[this.tableFixedDeposite.Amt_After_Due_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow AccountMasterRow {
                get {
                    return ((AccountMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_FixedDeposite_AccountMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FixedDeposite_AccountMaster"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GuarantorRow : global::System.Data.DataRow {
            
            private GuarantorDataTable tableGuarantor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GuarantorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGuarantor = ((GuarantorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GId {
                get {
                    return ((decimal)(this[this.tableGuarantor.GIdColumn]));
                }
                set {
                    this[this.tableGuarantor.GIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GName {
                get {
                    return ((string)(this[this.tableGuarantor.GNameColumn]));
                }
                set {
                    this[this.tableGuarantor.GNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BirthDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGuarantor.BirthDateColumn]));
                }
                set {
                    this[this.tableGuarantor.BirthDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Res_Add {
                get {
                    return ((string)(this[this.tableGuarantor.Res_AddColumn]));
                }
                set {
                    this[this.tableGuarantor.Res_AddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Off_Add {
                get {
                    try {
                        return ((string)(this[this.tableGuarantor.Off_AddColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Off_Add\' in table \'Guarantor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGuarantor.Off_AddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Phone_No {
                get {
                    return ((decimal)(this[this.tableGuarantor.Phone_NoColumn]));
                }
                set {
                    this[this.tableGuarantor.Phone_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Occupation {
                get {
                    try {
                        return ((string)(this[this.tableGuarantor.OccupationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Occupation\' in table \'Guarantor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGuarantor.OccupationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acc_No {
                get {
                    try {
                        return ((decimal)(this[this.tableGuarantor.Acc_NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acc_No\' in table \'Guarantor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGuarantor.Acc_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AppNo {
                get {
                    return ((decimal)(this[this.tableGuarantor.AppNoColumn]));
                }
                set {
                    this[this.tableGuarantor.AppNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow AccountMasterRow {
                get {
                    return ((AccountMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_Guarantor_AccountMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Guarantor_AccountMaster"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOff_AddNull() {
                return this.IsNull(this.tableGuarantor.Off_AddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOff_AddNull() {
                this[this.tableGuarantor.Off_AddColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccupationNull() {
                return this.IsNull(this.tableGuarantor.OccupationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccupationNull() {
                this[this.tableGuarantor.OccupationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcc_NoNull() {
                return this.IsNull(this.tableGuarantor.Acc_NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcc_NoNull() {
                this[this.tableGuarantor.Acc_NoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LockerRow : global::System.Data.DataRow {
            
            private LockerDataTable tableLocker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LockerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLocker = ((LockerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acc_No {
                get {
                    return ((decimal)(this[this.tableLocker.Acc_NoColumn]));
                }
                set {
                    this[this.tableLocker.Acc_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OpeningDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLocker.OpeningDateColumn]));
                }
                set {
                    this[this.tableLocker.OpeningDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Deposit_Amt {
                get {
                    return ((decimal)(this[this.tableLocker.Deposit_AmtColumn]));
                }
                set {
                    this[this.tableLocker.Deposit_AmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Active {
                get {
                    return ((string)(this[this.tableLocker.ActiveColumn]));
                }
                set {
                    this[this.tableLocker.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LockerNo {
                get {
                    return ((decimal)(this[this.tableLocker.LockerNoColumn]));
                }
                set {
                    this[this.tableLocker.LockerNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow AccountMasterRow {
                get {
                    return ((AccountMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_Locker_AccountMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Locker_AccountMaster"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PasswordMasterRow : global::System.Data.DataRow {
            
            private PasswordMasterDataTable tablePasswordMaster;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PasswordMasterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePasswordMaster = ((PasswordMasterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserId {
                get {
                    return ((string)(this[this.tablePasswordMaster.UserIdColumn]));
                }
                set {
                    this[this.tablePasswordMaster.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Userpassword {
                get {
                    return ((string)(this[this.tablePasswordMaster.UserpasswordColumn]));
                }
                set {
                    this[this.tablePasswordMaster.UserpasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfCreated {
                get {
                    return ((global::System.DateTime)(this[this.tablePasswordMaster.DateOfCreatedColumn]));
                }
                set {
                    this[this.tablePasswordMaster.DateOfCreatedColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MinorRow : global::System.Data.DataRow {
            
            private MinorDataTable tableMinor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MinorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMinor = ((MinorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nameofparent {
                get {
                    return ((string)(this[this.tableMinor.NameofparentColumn]));
                }
                set {
                    this[this.tableMinor.NameofparentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BirthDate {
                get {
                    return ((global::System.DateTime)(this[this.tableMinor.BirthDateColumn]));
                }
                set {
                    this[this.tableMinor.BirthDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Res_Add {
                get {
                    return ((string)(this[this.tableMinor.Res_AddColumn]));
                }
                set {
                    this[this.tableMinor.Res_AddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Off_Add {
                get {
                    try {
                        return ((string)(this[this.tableMinor.Off_AddColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Off_Add\' in table \'Minor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMinor.Off_AddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Occupation {
                get {
                    try {
                        return ((string)(this[this.tableMinor.OccupationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Occupation\' in table \'Minor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMinor.OccupationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Relation {
                get {
                    return ((string)(this[this.tableMinor.RelationColumn]));
                }
                set {
                    this[this.tableMinor.RelationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinorId {
                get {
                    return ((decimal)(this[this.tableMinor.MinorIdColumn]));
                }
                set {
                    this[this.tableMinor.MinorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AccNo {
                get {
                    return ((decimal)(this[this.tableMinor.AccNoColumn]));
                }
                set {
                    this[this.tableMinor.AccNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow AccountMasterRow {
                get {
                    return ((AccountMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_Minor_AccountMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Minor_AccountMaster"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOff_AddNull() {
                return this.IsNull(this.tableMinor.Off_AddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOff_AddNull() {
                this[this.tableMinor.Off_AddColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccupationNull() {
                return this.IsNull(this.tableMinor.OccupationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccupationNull() {
                this[this.tableMinor.OccupationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HomeStudentLoanRow : global::System.Data.DataRow {
            
            private HomeStudentLoanDataTable tableHomeStudentLoan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HomeStudentLoanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHomeStudentLoan = ((HomeStudentLoanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AppNo {
                get {
                    return ((decimal)(this[this.tableHomeStudentLoan.AppNoColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.AppNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acc_No {
                get {
                    return ((decimal)(this[this.tableHomeStudentLoan.Acc_NoColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.Acc_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TargetPropertyAddress {
                get {
                    try {
                        return ((string)(this[this.tableHomeStudentLoan.TargetPropertyAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TargetPropertyAddress\' in table \'HomeStudentLoan\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableHomeStudentLoan.TargetPropertyAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SavingAmt {
                get {
                    return ((decimal)(this[this.tableHomeStudentLoan.SavingAmtColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.SavingAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ProvidentAmt {
                get {
                    return ((decimal)(this[this.tableHomeStudentLoan.ProvidentAmtColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.ProvidentAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal immovableAmt {
                get {
                    return ((decimal)(this[this.tableHomeStudentLoan.immovableAmtColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.immovableAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LIC_No {
                get {
                    try {
                        return ((decimal)(this[this.tableHomeStudentLoan.LIC_NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIC_No\' in table \'HomeStudentLoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHomeStudentLoan.LIC_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LICAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableHomeStudentLoan.LICAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LICAmt\' in table \'HomeStudentLoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHomeStudentLoan.LICAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LICMaturityDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableHomeStudentLoan.LICMaturityDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LICMaturityDate\' in table \'HomeStudentLoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHomeStudentLoan.LICMaturityDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AppDate {
                get {
                    return ((global::System.DateTime)(this[this.tableHomeStudentLoan.AppDateColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.AppDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LoanAmt {
                get {
                    return ((decimal)(this[this.tableHomeStudentLoan.LoanAmtColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.LoanAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Intrate {
                get {
                    return ((decimal)(this[this.tableHomeStudentLoan.IntrateColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.IntrateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EMI {
                get {
                    return ((decimal)(this[this.tableHomeStudentLoan.EMIColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.EMIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoanType {
                get {
                    return ((string)(this[this.tableHomeStudentLoan.LoanTypeColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.LoanTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Salary {
                get {
                    return ((decimal)(this[this.tableHomeStudentLoan.SalaryColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.SalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal No_Of_Installment {
                get {
                    return ((decimal)(this[this.tableHomeStudentLoan.No_Of_InstallmentColumn]));
                }
                set {
                    this[this.tableHomeStudentLoan.No_Of_InstallmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow AccountMasterRow {
                get {
                    return ((AccountMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_HomeStudentLoan_AccountMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_HomeStudentLoan_AccountMaster"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTargetPropertyAddressNull() {
                return this.IsNull(this.tableHomeStudentLoan.TargetPropertyAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTargetPropertyAddressNull() {
                this[this.tableHomeStudentLoan.TargetPropertyAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIC_NoNull() {
                return this.IsNull(this.tableHomeStudentLoan.LIC_NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIC_NoNull() {
                this[this.tableHomeStudentLoan.LIC_NoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLICAmtNull() {
                return this.IsNull(this.tableHomeStudentLoan.LICAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLICAmtNull() {
                this[this.tableHomeStudentLoan.LICAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLICMaturityDateNull() {
                return this.IsNull(this.tableHomeStudentLoan.LICMaturityDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLICMaturityDateNull() {
                this[this.tableHomeStudentLoan.LICMaturityDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LoanTransactionRow : global::System.Data.DataRow {
            
            private LoanTransactionDataTable tableLoanTransaction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoanTransactionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLoanTransaction = ((LoanTransactionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AccNo {
                get {
                    return ((decimal)(this[this.tableLoanTransaction.AccNoColumn]));
                }
                set {
                    this[this.tableLoanTransaction.AccNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Balance {
                get {
                    return ((decimal)(this[this.tableLoanTransaction.BalanceColumn]));
                }
                set {
                    this[this.tableLoanTransaction.BalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EMI {
                get {
                    return ((decimal)(this[this.tableLoanTransaction.EMIColumn]));
                }
                set {
                    this[this.tableLoanTransaction.EMIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Interestrate {
                get {
                    return ((decimal)(this[this.tableLoanTransaction.InterestrateColumn]));
                }
                set {
                    this[this.tableLoanTransaction.InterestrateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransactionWay {
                get {
                    return ((string)(this[this.tableLoanTransaction.TransactionWayColumn]));
                }
                set {
                    this[this.tableLoanTransaction.TransactionWayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LoanTransactionNo {
                get {
                    return ((decimal)(this[this.tableLoanTransaction.LoanTransactionNoColumn]));
                }
                set {
                    this[this.tableLoanTransaction.LoanTransactionNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Loantype {
                get {
                    return ((string)(this[this.tableLoanTransaction.LoantypeColumn]));
                }
                set {
                    this[this.tableLoanTransaction.LoantypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow AccountMasterRow {
                get {
                    return ((AccountMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_LoanTransaction_AccountMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LoanTransaction_AccountMaster"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StudentLoanRow : global::System.Data.DataRow {
            
            private StudentLoanDataTable tableStudentLoan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StudentLoanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStudentLoan = ((StudentLoanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AppNo {
                get {
                    return ((decimal)(this[this.tableStudentLoan.AppNoColumn]));
                }
                set {
                    this[this.tableStudentLoan.AppNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acc_No {
                get {
                    return ((decimal)(this[this.tableStudentLoan.Acc_NoColumn]));
                }
                set {
                    this[this.tableStudentLoan.Acc_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PassedYear {
                get {
                    return ((global::System.DateTime)(this[this.tableStudentLoan.PassedYearColumn]));
                }
                set {
                    this[this.tableStudentLoan.PassedYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal passedMarks {
                get {
                    return ((decimal)(this[this.tableStudentLoan.passedMarksColumn]));
                }
                set {
                    this[this.tableStudentLoan.passedMarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Division {
                get {
                    return ((string)(this[this.tableStudentLoan.DivisionColumn]));
                }
                set {
                    this[this.tableStudentLoan.DivisionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherScholarship {
                get {
                    return ((string)(this[this.tableStudentLoan.OtherScholarshipColumn]));
                }
                set {
                    this[this.tableStudentLoan.OtherScholarshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProposedCourse {
                get {
                    return ((string)(this[this.tableStudentLoan.ProposedCourseColumn]));
                }
                set {
                    this[this.tableStudentLoan.ProposedCourseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Duration {
                get {
                    return ((decimal)(this[this.tableStudentLoan.DurationColumn]));
                }
                set {
                    this[this.tableStudentLoan.DurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CollegeName {
                get {
                    return ((string)(this[this.tableStudentLoan.CollegeNameColumn]));
                }
                set {
                    this[this.tableStudentLoan.CollegeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CollegeAddress {
                get {
                    return ((string)(this[this.tableStudentLoan.CollegeAddressColumn]));
                }
                set {
                    this[this.tableStudentLoan.CollegeAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LoanAmt {
                get {
                    return ((decimal)(this[this.tableStudentLoan.LoanAmtColumn]));
                }
                set {
                    this[this.tableStudentLoan.LoanAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal intRate {
                get {
                    return ((decimal)(this[this.tableStudentLoan.intRateColumn]));
                }
                set {
                    this[this.tableStudentLoan.intRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EMI {
                get {
                    return ((decimal)(this[this.tableStudentLoan.EMIColumn]));
                }
                set {
                    this[this.tableStudentLoan.EMIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PassedExam {
                get {
                    return ((string)(this[this.tableStudentLoan.PassedExamColumn]));
                }
                set {
                    this[this.tableStudentLoan.PassedExamColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalFees {
                get {
                    return ((decimal)(this[this.tableStudentLoan.TotalFeesColumn]));
                }
                set {
                    this[this.tableStudentLoan.TotalFeesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AppDate {
                get {
                    return ((global::System.DateTime)(this[this.tableStudentLoan.AppDateColumn]));
                }
                set {
                    this[this.tableStudentLoan.AppDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Salary {
                get {
                    return ((decimal)(this[this.tableStudentLoan.SalaryColumn]));
                }
                set {
                    this[this.tableStudentLoan.SalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal No_Of_Installment {
                get {
                    return ((decimal)(this[this.tableStudentLoan.No_Of_InstallmentColumn]));
                }
                set {
                    this[this.tableStudentLoan.No_Of_InstallmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow AccountMasterRow {
                get {
                    return ((AccountMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_StudentLoan_AccountMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_StudentLoan_AccountMaster"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TransactionTableRow : global::System.Data.DataRow {
            
            private TransactionTableDataTable tableTransactionTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransactionTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransactionTable = ((TransactionTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AccNo {
                get {
                    return ((decimal)(this[this.tableTransactionTable.AccNoColumn]));
                }
                set {
                    this[this.tableTransactionTable.AccNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TransactionNo {
                get {
                    return ((decimal)(this[this.tableTransactionTable.TransactionNoColumn]));
                }
                set {
                    this[this.tableTransactionTable.TransactionNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Balance {
                get {
                    return ((decimal)(this[this.tableTransactionTable.BalanceColumn]));
                }
                set {
                    this[this.tableTransactionTable.BalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransactionWay {
                get {
                    return ((string)(this[this.tableTransactionTable.TransactionWayColumn]));
                }
                set {
                    this[this.tableTransactionTable.TransactionWayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Deposit {
                get {
                    try {
                        return ((decimal)(this[this.tableTransactionTable.DepositColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deposit\' in table \'TransactionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionTable.DepositColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Withdrawl {
                get {
                    try {
                        return ((decimal)(this[this.tableTransactionTable.WithdrawlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Withdrawl\' in table \'TransactionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionTable.WithdrawlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TransactionDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTransactionTable.TransactionDateColumn]));
                }
                set {
                    this[this.tableTransactionTable.TransactionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow AccountMasterRow {
                get {
                    return ((AccountMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_TransactionTable_AccountMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TransactionTable_AccountMaster"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepositNull() {
                return this.IsNull(this.tableTransactionTable.DepositColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepositNull() {
                this[this.tableTransactionTable.DepositColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWithdrawlNull() {
                return this.IsNull(this.tableTransactionTable.WithdrawlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWithdrawlNull() {
                this[this.tableTransactionTable.WithdrawlColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JointHolderRowChangeEvent : global::System.EventArgs {
            
            private JointHolderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JointHolderRowChangeEvent(JointHolderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JointHolderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AccountMasterRowChangeEvent : global::System.EventArgs {
            
            private AccountMasterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRowChangeEvent(AccountMasterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ChequeBookRowChangeEvent : global::System.EventArgs {
            
            private ChequeBookRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChequeBookRowChangeEvent(ChequeBookRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChequeBookRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FixedDepositeRowChangeEvent : global::System.EventArgs {
            
            private FixedDepositeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixedDepositeRowChangeEvent(FixedDepositeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixedDepositeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GuarantorRowChangeEvent : global::System.EventArgs {
            
            private GuarantorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GuarantorRowChangeEvent(GuarantorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GuarantorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LockerRowChangeEvent : global::System.EventArgs {
            
            private LockerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRowChangeEvent(LockerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PasswordMasterRowChangeEvent : global::System.EventArgs {
            
            private PasswordMasterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PasswordMasterRowChangeEvent(PasswordMasterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PasswordMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MinorRowChangeEvent : global::System.EventArgs {
            
            private MinorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MinorRowChangeEvent(MinorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MinorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HomeStudentLoanRowChangeEvent : global::System.EventArgs {
            
            private HomeStudentLoanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HomeStudentLoanRowChangeEvent(HomeStudentLoanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HomeStudentLoanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LoanTransactionRowChangeEvent : global::System.EventArgs {
            
            private LoanTransactionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoanTransactionRowChangeEvent(LoanTransactionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoanTransactionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StudentLoanRowChangeEvent : global::System.EventArgs {
            
            private StudentLoanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentLoanRowChangeEvent(StudentLoanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentLoanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TransactionTableRowChangeEvent : global::System.EventArgs {
            
            private TransactionTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionTableRowChangeEvent(TransactionTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Bank.Forms.BankDataSet2TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class JointHolderTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JointHolderTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "JointHolder";
            tableMapping.ColumnMappings.Add("JointHolderID", "JointHolderID");
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate");
            tableMapping.ColumnMappings.Add("Phone_No", "Phone_No");
            tableMapping.ColumnMappings.Add("Nationality", "Nationality");
            tableMapping.ColumnMappings.Add("Res_Add", "Res_Add");
            tableMapping.ColumnMappings.Add("Off_Add", "Off_Add");
            tableMapping.ColumnMappings.Add("PhotoPath", "PhotoPath");
            tableMapping.ColumnMappings.Add("signPath", "signPath");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [JointHolder] WHERE (([JointHolderID] = @Original_JointHolderID) AND ([BirthDate] = @Original_BirthDate) AND ([Phone_No] = @Original_Phone_No) AND ([Nationality] = @Original_Nationality) AND ([Res_Add] = @Original_Res_Add) AND ((@IsNull_Off_Add = 1 AND [Off_Add] IS NULL) OR ([Off_Add] = @Original_Off_Add)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JointHolderID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "JointHolderID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Phone_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nationality", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nationality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Off_Add", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [JointHolder] SET [JointHolderID] = @JointHolderID, [BirthDate] = @BirthDate, [Phone_No] = @Phone_No, [Nationality] = @Nationality, [Res_Add] = @Res_Add, [Off_Add] = @Off_Add, [PhotoPath] = @PhotoPath, [signPath] = @signPath WHERE (([JointHolderID] = @Original_JointHolderID) AND ([BirthDate] = @Original_BirthDate) AND ([Phone_No] = @Original_Phone_No) AND ([Nationality] = @Original_Nationality) AND ([Res_Add] = @Original_Res_Add) AND ((@IsNull_Off_Add = 1 AND [Off_Add] IS NULL) OR ([Off_Add] = @Original_Off_Add)));
SELECT JointHolderID, BirthDate, Phone_No, Nationality, Res_Add, Off_Add, PhotoPath, signPath FROM JointHolder WHERE (JointHolderID = @JointHolderID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JointHolderID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "JointHolderID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Phone_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nationality", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nationality", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhotoPath", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhotoPath", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@signPath", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "signPath", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JointHolderID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "JointHolderID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Phone_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nationality", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nationality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Off_Add", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.newbankConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     JointHolderID, BirthDate, Phone_No, Nationality, Res_Add, Off_Add, Pho" +
                "toPath, signPath\r\nFROM         JointHolder";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.JointHolderDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.JointHolderDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.JointHolderDataTable dataTable = new BankDataSet2.JointHolderDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.JointHolderDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "JointHolder");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_JointHolderID, System.DateTime Original_BirthDate, decimal Original_Phone_No, string Original_Nationality, string Original_Res_Add, string Original_Off_Add) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_JointHolderID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_BirthDate));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_Phone_No));
            if ((Original_Nationality == null)) {
                throw new global::System.ArgumentNullException("Original_Nationality");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Nationality));
            }
            if ((Original_Res_Add == null)) {
                throw new global::System.ArgumentNullException("Original_Res_Add");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Res_Add));
            }
            if ((Original_Off_Add == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Off_Add));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal JointHolderID, System.DateTime BirthDate, decimal Phone_No, string Nationality, string Res_Add, string Off_Add, byte[] PhotoPath, byte[] signPath, decimal Original_JointHolderID, System.DateTime Original_BirthDate, decimal Original_Phone_No, string Original_Nationality, string Original_Res_Add, string Original_Off_Add) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(JointHolderID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(BirthDate));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Phone_No));
            if ((Nationality == null)) {
                throw new global::System.ArgumentNullException("Nationality");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Nationality));
            }
            if ((Res_Add == null)) {
                throw new global::System.ArgumentNullException("Res_Add");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Res_Add));
            }
            if ((Off_Add == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Off_Add));
            }
            if ((PhotoPath == null)) {
                throw new global::System.ArgumentNullException("PhotoPath");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((byte[])(PhotoPath));
            }
            if ((signPath == null)) {
                throw new global::System.ArgumentNullException("signPath");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((byte[])(signPath));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_JointHolderID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_BirthDate));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(Original_Phone_No));
            if ((Original_Nationality == null)) {
                throw new global::System.ArgumentNullException("Original_Nationality");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Nationality));
            }
            if ((Original_Res_Add == null)) {
                throw new global::System.ArgumentNullException("Original_Res_Add");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Res_Add));
            }
            if ((Original_Off_Add == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Off_Add));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime BirthDate, decimal Phone_No, string Nationality, string Res_Add, string Off_Add, byte[] PhotoPath, byte[] signPath, decimal Original_JointHolderID, System.DateTime Original_BirthDate, decimal Original_Phone_No, string Original_Nationality, string Original_Res_Add, string Original_Off_Add) {
            return this.Update(Original_JointHolderID, BirthDate, Phone_No, Nationality, Res_Add, Off_Add, PhotoPath, signPath, Original_JointHolderID, Original_BirthDate, Original_Phone_No, Original_Nationality, Original_Res_Add, Original_Off_Add);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AccountMasterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AccountMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AccountMaster";
            tableMapping.ColumnMappings.Add("Acc_No", "Acc_No");
            tableMapping.ColumnMappings.Add("Reference_No", "Reference_No");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Opening_Date", "Opening_Date");
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate");
            tableMapping.ColumnMappings.Add("Acc_type", "Acc_type");
            tableMapping.ColumnMappings.Add("Res_Add", "Res_Add");
            tableMapping.ColumnMappings.Add("Off_Add", "Off_Add");
            tableMapping.ColumnMappings.Add("IncomeTax_No", "IncomeTax_No");
            tableMapping.ColumnMappings.Add("Pan_No", "Pan_No");
            tableMapping.ColumnMappings.Add("JointHolder", "JointHolder");
            tableMapping.ColumnMappings.Add("Minor", "Minor");
            tableMapping.ColumnMappings.Add("Phone_No", "Phone_No");
            tableMapping.ColumnMappings.Add("Nationality", "Nationality");
            tableMapping.ColumnMappings.Add("Occupation", "Occupation");
            tableMapping.ColumnMappings.Add("Education", "Education");
            tableMapping.ColumnMappings.Add("Sex", "Sex");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [AccountMaster] WHERE (([Acc_No] = @Original_Acc_No) AND ([Reference_No] = @Original_Reference_No) AND ([Name] = @Original_Name) AND ([Opening_Date] = @Original_Opening_Date) AND ([BirthDate] = @Original_BirthDate) AND ([Acc_type] = @Original_Acc_type) AND ([Res_Add] = @Original_Res_Add) AND ((@IsNull_Off_Add = 1 AND [Off_Add] IS NULL) OR ([Off_Add] = @Original_Off_Add)) AND ((@IsNull_IncomeTax_No = 1 AND [IncomeTax_No] IS NULL) OR ([IncomeTax_No] = @Original_IncomeTax_No)) AND ((@IsNull_Pan_No = 1 AND [Pan_No] IS NULL) OR ([Pan_No] = @Original_Pan_No)) AND ([JointHolder] = @Original_JointHolder) AND ([Minor] = @Original_Minor) AND ([Phone_No] = @Original_Phone_No) AND ([Nationality] = @Original_Nationality) AND ([Occupation] = @Original_Occupation) AND ([Education] = @Original_Education) AND ([Sex] = @Original_Sex))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Reference_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Reference_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Opening_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Opening_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_type", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Acc_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Off_Add", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IncomeTax_No", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IncomeTax_No", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IncomeTax_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "IncomeTax_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Pan_No", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pan_No", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pan_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Pan_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JointHolder", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JointHolder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Minor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Minor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Phone_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nationality", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nationality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Occupation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Education", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Education", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sex", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sex", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [AccountMaster] SET [Acc_No] = @Acc_No, [Reference_No] = @Reference_No, [Name] = @Name, [Opening_Date] = @Opening_Date, [BirthDate] = @BirthDate, [Acc_type] = @Acc_type, [Res_Add] = @Res_Add, [Off_Add] = @Off_Add, [IncomeTax_No] = @IncomeTax_No, [Pan_No] = @Pan_No, [JointHolder] = @JointHolder, [Minor] = @Minor, [Phone_No] = @Phone_No, [Nationality] = @Nationality, [Occupation] = @Occupation, [Education] = @Education, [Sex] = @Sex WHERE (([Acc_No] = @Original_Acc_No) AND ([Reference_No] = @Original_Reference_No) AND ([Name] = @Original_Name) AND ([Opening_Date] = @Original_Opening_Date) AND ([BirthDate] = @Original_BirthDate) AND ([Acc_type] = @Original_Acc_type) AND ([Res_Add] = @Original_Res_Add) AND ((@IsNull_Off_Add = 1 AND [Off_Add] IS NULL) OR ([Off_Add] = @Original_Off_Add)) AND ((@IsNull_IncomeTax_No = 1 AND [IncomeTax_No] IS NULL) OR ([IncomeTax_No] = @Original_IncomeTax_No)) AND ((@IsNull_Pan_No = 1 AND [Pan_No] IS NULL) OR ([Pan_No] = @Original_Pan_No)) AND ([JointHolder] = @Original_JointHolder) AND ([Minor] = @Original_Minor) AND ([Phone_No] = @Original_Phone_No) AND ([Nationality] = @Original_Nationality) AND ([Occupation] = @Original_Occupation) AND ([Education] = @Original_Education) AND ([Sex] = @Original_Sex));
SELECT Acc_No, Reference_No, Name, Opening_Date, BirthDate, Acc_type, Res_Add, Off_Add, IncomeTax_No, Pan_No, JointHolder, Minor, Phone_No, Nationality, Occupation, Education, Sex FROM AccountMaster WHERE (Acc_No = @Acc_No)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Reference_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Reference_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Opening_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Opening_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_type", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Acc_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IncomeTax_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "IncomeTax_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pan_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Pan_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JointHolder", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JointHolder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Minor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Minor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Phone_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nationality", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nationality", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Occupation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Education", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Education", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sex", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sex", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Reference_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Reference_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Opening_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Opening_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_type", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Acc_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Off_Add", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IncomeTax_No", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IncomeTax_No", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IncomeTax_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "IncomeTax_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Pan_No", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pan_No", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pan_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Pan_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JointHolder", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JointHolder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Minor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Minor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Phone_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nationality", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nationality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Occupation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Education", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Education", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sex", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sex", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.BanK_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        Acc_No, Reference_No, Name, Opening_Date, BirthDate, Acc_type, Res_" +
                "Add, Off_Add, IncomeTax_No, Pan_No, JointHolder, Minor, Phone_No, Nationality, \r" +
                "\n                         Occupation, Education, Sex\r\nFROM            AccountMas" +
                "ter";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.AccountMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.AccountMasterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.AccountMasterDataTable dataTable = new BankDataSet2.AccountMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.AccountMasterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "AccountMaster");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    decimal Original_Acc_No, 
                    decimal Original_Reference_No, 
                    string Original_Name, 
                    System.DateTime Original_Opening_Date, 
                    System.DateTime Original_BirthDate, 
                    string Original_Acc_type, 
                    string Original_Res_Add, 
                    string Original_Off_Add, 
                    global::System.Nullable<decimal> Original_IncomeTax_No, 
                    global::System.Nullable<decimal> Original_Pan_No, 
                    int Original_JointHolder, 
                    string Original_Minor, 
                    decimal Original_Phone_No, 
                    string Original_Nationality, 
                    string Original_Occupation, 
                    string Original_Education, 
                    string Original_Sex) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_Acc_No));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_Reference_No));
            if ((Original_Name == null)) {
                throw new global::System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_Opening_Date));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_BirthDate));
            if ((Original_Acc_type == null)) {
                throw new global::System.ArgumentNullException("Original_Acc_type");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Acc_type));
            }
            if ((Original_Res_Add == null)) {
                throw new global::System.ArgumentNullException("Original_Res_Add");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Res_Add));
            }
            if ((Original_Off_Add == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Off_Add));
            }
            if ((Original_IncomeTax_No.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_IncomeTax_No.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_Pan_No.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_Pan_No.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(Original_JointHolder));
            if ((Original_Minor == null)) {
                throw new global::System.ArgumentNullException("Original_Minor");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_Minor));
            }
            this.Adapter.DeleteCommand.Parameters[15].Value = ((decimal)(Original_Phone_No));
            if ((Original_Nationality == null)) {
                throw new global::System.ArgumentNullException("Original_Nationality");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_Nationality));
            }
            if ((Original_Occupation == null)) {
                throw new global::System.ArgumentNullException("Original_Occupation");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_Occupation));
            }
            if ((Original_Education == null)) {
                throw new global::System.ArgumentNullException("Original_Education");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Education));
            }
            if ((Original_Sex == null)) {
                throw new global::System.ArgumentNullException("Original_Sex");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_Sex));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal Acc_No, 
                    decimal Reference_No, 
                    string Name, 
                    System.DateTime Opening_Date, 
                    System.DateTime BirthDate, 
                    string Acc_type, 
                    string Res_Add, 
                    string Off_Add, 
                    global::System.Nullable<decimal> IncomeTax_No, 
                    global::System.Nullable<decimal> Pan_No, 
                    int JointHolder, 
                    string Minor, 
                    decimal Phone_No, 
                    string Nationality, 
                    string Occupation, 
                    string Education, 
                    string Sex, 
                    decimal Original_Acc_No, 
                    decimal Original_Reference_No, 
                    string Original_Name, 
                    System.DateTime Original_Opening_Date, 
                    System.DateTime Original_BirthDate, 
                    string Original_Acc_type, 
                    string Original_Res_Add, 
                    string Original_Off_Add, 
                    global::System.Nullable<decimal> Original_IncomeTax_No, 
                    global::System.Nullable<decimal> Original_Pan_No, 
                    int Original_JointHolder, 
                    string Original_Minor, 
                    decimal Original_Phone_No, 
                    string Original_Nationality, 
                    string Original_Occupation, 
                    string Original_Education, 
                    string Original_Sex) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(Acc_No));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Reference_No));
            if ((Name == null)) {
                throw new global::System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(Opening_Date));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(BirthDate));
            if ((Acc_type == null)) {
                throw new global::System.ArgumentNullException("Acc_type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Acc_type));
            }
            if ((Res_Add == null)) {
                throw new global::System.ArgumentNullException("Res_Add");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Res_Add));
            }
            if ((Off_Add == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Off_Add));
            }
            if ((IncomeTax_No.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(IncomeTax_No.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Pan_No.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Pan_No.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(JointHolder));
            if ((Minor == null)) {
                throw new global::System.ArgumentNullException("Minor");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Minor));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Phone_No));
            if ((Nationality == null)) {
                throw new global::System.ArgumentNullException("Nationality");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Nationality));
            }
            if ((Occupation == null)) {
                throw new global::System.ArgumentNullException("Occupation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Occupation));
            }
            if ((Education == null)) {
                throw new global::System.ArgumentNullException("Education");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Education));
            }
            if ((Sex == null)) {
                throw new global::System.ArgumentNullException("Sex");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Sex));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_Acc_No));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_Reference_No));
            if ((Original_Name == null)) {
                throw new global::System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(Original_Opening_Date));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_BirthDate));
            if ((Original_Acc_type == null)) {
                throw new global::System.ArgumentNullException("Original_Acc_type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_Acc_type));
            }
            if ((Original_Res_Add == null)) {
                throw new global::System.ArgumentNullException("Original_Res_Add");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_Res_Add));
            }
            if ((Original_Off_Add == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_Off_Add));
            }
            if ((Original_IncomeTax_No.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((decimal)(Original_IncomeTax_No.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_Pan_No.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(Original_Pan_No.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(Original_JointHolder));
            if ((Original_Minor == null)) {
                throw new global::System.ArgumentNullException("Original_Minor");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_Minor));
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(Original_Phone_No));
            if ((Original_Nationality == null)) {
                throw new global::System.ArgumentNullException("Original_Nationality");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_Nationality));
            }
            if ((Original_Occupation == null)) {
                throw new global::System.ArgumentNullException("Original_Occupation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_Occupation));
            }
            if ((Original_Education == null)) {
                throw new global::System.ArgumentNullException("Original_Education");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_Education));
            }
            if ((Original_Sex == null)) {
                throw new global::System.ArgumentNullException("Original_Sex");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_Sex));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal Reference_No, 
                    string Name, 
                    System.DateTime Opening_Date, 
                    System.DateTime BirthDate, 
                    string Acc_type, 
                    string Res_Add, 
                    string Off_Add, 
                    global::System.Nullable<decimal> IncomeTax_No, 
                    global::System.Nullable<decimal> Pan_No, 
                    int JointHolder, 
                    string Minor, 
                    decimal Phone_No, 
                    string Nationality, 
                    string Occupation, 
                    string Education, 
                    string Sex, 
                    decimal Original_Acc_No, 
                    decimal Original_Reference_No, 
                    string Original_Name, 
                    System.DateTime Original_Opening_Date, 
                    System.DateTime Original_BirthDate, 
                    string Original_Acc_type, 
                    string Original_Res_Add, 
                    string Original_Off_Add, 
                    global::System.Nullable<decimal> Original_IncomeTax_No, 
                    global::System.Nullable<decimal> Original_Pan_No, 
                    int Original_JointHolder, 
                    string Original_Minor, 
                    decimal Original_Phone_No, 
                    string Original_Nationality, 
                    string Original_Occupation, 
                    string Original_Education, 
                    string Original_Sex) {
            return this.Update(Original_Acc_No, Reference_No, Name, Opening_Date, BirthDate, Acc_type, Res_Add, Off_Add, IncomeTax_No, Pan_No, JointHolder, Minor, Phone_No, Nationality, Occupation, Education, Sex, Original_Acc_No, Original_Reference_No, Original_Name, Original_Opening_Date, Original_BirthDate, Original_Acc_type, Original_Res_Add, Original_Off_Add, Original_IncomeTax_No, Original_Pan_No, Original_JointHolder, Original_Minor, Original_Phone_No, Original_Nationality, Original_Occupation, Original_Education, Original_Sex);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ChequeBookTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ChequeBookTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ChequeBook";
            tableMapping.ColumnMappings.Add("Acc_No", "Acc_No");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("Chq_No_From", "Chq_No_From");
            tableMapping.ColumnMappings.Add("Chq_No_To", "Chq_No_To");
            tableMapping.ColumnMappings.Add("ChqID", "ChqID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [ChequeBook] WHERE (([Acc_No] = @Original_Acc_No) AND ([Name] = @Orig" +
                "inal_Name) AND ([Quantity] = @Original_Quantity) AND ([Chq_No_From] = @Original_" +
                "Chq_No_From) AND ([Chq_No_To] = @Original_Chq_No_To) AND ([ChqID] = @Original_Ch" +
                "qID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Quantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Chq_No_From", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Chq_No_From", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Chq_No_To", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Chq_No_To", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChqID", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChqID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ChequeBook] ([Acc_No], [Name], [Quantity], [Chq_No_From], [Chq_No_To], [ChqID]) VALUES (@Acc_No, @Name, @Quantity, @Chq_No_From, @Chq_No_To, @ChqID);
SELECT Acc_No, Name, Quantity, Chq_No_From, Chq_No_To, ChqID FROM ChequeBook WHERE (ChqID = @ChqID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Chq_No_From", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Chq_No_From", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Chq_No_To", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Chq_No_To", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChqID", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChqID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [ChequeBook] SET [Acc_No] = @Acc_No, [Name] = @Name, [Quantity] = @Quantity, [Chq_No_From] = @Chq_No_From, [Chq_No_To] = @Chq_No_To, [ChqID] = @ChqID WHERE (([Acc_No] = @Original_Acc_No) AND ([Name] = @Original_Name) AND ([Quantity] = @Original_Quantity) AND ([Chq_No_From] = @Original_Chq_No_From) AND ([Chq_No_To] = @Original_Chq_No_To) AND ([ChqID] = @Original_ChqID));
SELECT Acc_No, Name, Quantity, Chq_No_From, Chq_No_To, ChqID FROM ChequeBook WHERE (ChqID = @ChqID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Chq_No_From", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Chq_No_From", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Chq_No_To", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Chq_No_To", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChqID", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChqID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Quantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Chq_No_From", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Chq_No_From", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Chq_No_To", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Chq_No_To", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChqID", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChqID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.BanK_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        Acc_No, Name, Quantity, Chq_No_From, Chq_No_To, ChqID\r\nFROM        " +
                "    ChequeBook";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.ChequeBookDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.ChequeBookDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.ChequeBookDataTable dataTable = new BankDataSet2.ChequeBookDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.ChequeBookDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "ChequeBook");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_Acc_No, string Original_Name, decimal Original_Quantity, decimal Original_Chq_No_From, decimal Original_Chq_No_To, string Original_ChqID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_Acc_No));
            if ((Original_Name == null)) {
                throw new global::System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_Quantity));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_Chq_No_From));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_Chq_No_To));
            if ((Original_ChqID == null)) {
                throw new global::System.ArgumentNullException("Original_ChqID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_ChqID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal Acc_No, string Name, decimal Quantity, decimal Chq_No_From, decimal Chq_No_To, string ChqID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(Acc_No));
            if ((Name == null)) {
                throw new global::System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Quantity));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(Chq_No_From));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(Chq_No_To));
            if ((ChqID == null)) {
                throw new global::System.ArgumentNullException("ChqID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ChqID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal Acc_No, string Name, decimal Quantity, decimal Chq_No_From, decimal Chq_No_To, string ChqID, decimal Original_Acc_No, string Original_Name, decimal Original_Quantity, decimal Original_Chq_No_From, decimal Original_Chq_No_To, string Original_ChqID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(Acc_No));
            if ((Name == null)) {
                throw new global::System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Quantity));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Chq_No_From));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Chq_No_To));
            if ((ChqID == null)) {
                throw new global::System.ArgumentNullException("ChqID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ChqID));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_Acc_No));
            if ((Original_Name == null)) {
                throw new global::System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_Quantity));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_Chq_No_From));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(Original_Chq_No_To));
            if ((Original_ChqID == null)) {
                throw new global::System.ArgumentNullException("Original_ChqID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_ChqID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal Acc_No, string Name, decimal Quantity, decimal Chq_No_From, decimal Chq_No_To, decimal Original_Acc_No, string Original_Name, decimal Original_Quantity, decimal Original_Chq_No_From, decimal Original_Chq_No_To, string Original_ChqID) {
            return this.Update(Acc_No, Name, Quantity, Chq_No_From, Chq_No_To, Original_ChqID, Original_Acc_No, Original_Name, Original_Quantity, Original_Chq_No_From, Original_Chq_No_To, Original_ChqID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FixedDepositeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FixedDepositeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FixedDeposite";
            tableMapping.ColumnMappings.Add("Acc_No", "Acc_No");
            tableMapping.ColumnMappings.Add("Amt", "Amt");
            tableMapping.ColumnMappings.Add("Interest_Rate", "Interest_Rate");
            tableMapping.ColumnMappings.Add("Date_From", "Date_From");
            tableMapping.ColumnMappings.Add("Date_To", "Date_To");
            tableMapping.ColumnMappings.Add("FD_ID", "FD_ID");
            tableMapping.ColumnMappings.Add("Duration", "Duration");
            tableMapping.ColumnMappings.Add("Amt_After_Due_Date", "Amt_After_Due_Date");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [FixedDeposite] WHERE (([Acc_No] = @Original_Acc_No) AND ([Amt] = @Original_Amt) AND ([Interest_Rate] = @Original_Interest_Rate) AND ([Date_From] = @Original_Date_From) AND ([Date_To] = @Original_Date_To) AND ([FD_ID] = @Original_FD_ID) AND ([Duration] = @Original_Duration) AND ([Amt_After_Due_Date] = @Original_Amt_After_Due_Date))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Amt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Amt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Interest_Rate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Interest_Rate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date_From", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_From", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date_To", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_To", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FD_ID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FD_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Duration", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Duration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Amt_After_Due_Date", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Amt_After_Due_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [FixedDeposite] ([Acc_No], [Amt], [Interest_Rate], [Date_From], [Date_To], [FD_ID], [Duration], [Amt_After_Due_Date]) VALUES (@Acc_No, @Amt, @Interest_Rate, @Date_From, @Date_To, @FD_ID, @Duration, @Amt_After_Due_Date);
SELECT Acc_No, Amt, Interest_Rate, Date_From, Date_To, FD_ID, Duration, Amt_After_Due_Date FROM FixedDeposite WHERE (FD_ID = @FD_ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Amt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Interest_Rate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Interest_Rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date_From", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_From", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date_To", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_To", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FD_ID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FD_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Duration", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Duration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amt_After_Due_Date", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Amt_After_Due_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [FixedDeposite] SET [Acc_No] = @Acc_No, [Amt] = @Amt, [Interest_Rate] = @Interest_Rate, [Date_From] = @Date_From, [Date_To] = @Date_To, [FD_ID] = @FD_ID, [Duration] = @Duration, [Amt_After_Due_Date] = @Amt_After_Due_Date WHERE (([Acc_No] = @Original_Acc_No) AND ([Amt] = @Original_Amt) AND ([Interest_Rate] = @Original_Interest_Rate) AND ([Date_From] = @Original_Date_From) AND ([Date_To] = @Original_Date_To) AND ([FD_ID] = @Original_FD_ID) AND ([Duration] = @Original_Duration) AND ([Amt_After_Due_Date] = @Original_Amt_After_Due_Date));
SELECT Acc_No, Amt, Interest_Rate, Date_From, Date_To, FD_ID, Duration, Amt_After_Due_Date FROM FixedDeposite WHERE (FD_ID = @FD_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Amt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Interest_Rate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Interest_Rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date_From", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_From", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date_To", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_To", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FD_ID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FD_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Duration", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Duration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amt_After_Due_Date", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Amt_After_Due_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Amt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Amt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Interest_Rate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Interest_Rate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date_From", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_From", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date_To", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date_To", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FD_ID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FD_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Duration", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Duration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Amt_After_Due_Date", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Amt_After_Due_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.BanK_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        Acc_No, Amt, Interest_Rate, Date_From, Date_To, FD_ID, Duration, Am" +
                "t_After_Due_Date\r\nFROM            FixedDeposite";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.FixedDepositeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.FixedDepositeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.FixedDepositeDataTable dataTable = new BankDataSet2.FixedDepositeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.FixedDepositeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "FixedDeposite");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_Acc_No, decimal Original_Amt, decimal Original_Interest_Rate, System.DateTime Original_Date_From, System.DateTime Original_Date_To, long Original_FD_ID, decimal Original_Duration, decimal Original_Amt_After_Due_Date) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_Acc_No));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_Amt));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_Interest_Rate));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_Date_From));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_Date_To));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_FD_ID));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_Duration));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_Amt_After_Due_Date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal Acc_No, decimal Amt, decimal Interest_Rate, System.DateTime Date_From, System.DateTime Date_To, long FD_ID, decimal Duration, decimal Amt_After_Due_Date) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(Acc_No));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(Amt));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Interest_Rate));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(Date_From));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(Date_To));
            this.Adapter.InsertCommand.Parameters[5].Value = ((long)(FD_ID));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(Duration));
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(Amt_After_Due_Date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal Acc_No, 
                    decimal Amt, 
                    decimal Interest_Rate, 
                    System.DateTime Date_From, 
                    System.DateTime Date_To, 
                    long FD_ID, 
                    decimal Duration, 
                    decimal Amt_After_Due_Date, 
                    decimal Original_Acc_No, 
                    decimal Original_Amt, 
                    decimal Original_Interest_Rate, 
                    System.DateTime Original_Date_From, 
                    System.DateTime Original_Date_To, 
                    long Original_FD_ID, 
                    decimal Original_Duration, 
                    decimal Original_Amt_After_Due_Date) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(Acc_No));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Amt));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Interest_Rate));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(Date_From));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Date_To));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(FD_ID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Duration));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Amt_After_Due_Date));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_Acc_No));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_Amt));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(Original_Interest_Rate));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_Date_From));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_Date_To));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_FD_ID));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Duration));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(Original_Amt_After_Due_Date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal Acc_No, decimal Amt, decimal Interest_Rate, System.DateTime Date_From, System.DateTime Date_To, decimal Duration, decimal Amt_After_Due_Date, decimal Original_Acc_No, decimal Original_Amt, decimal Original_Interest_Rate, System.DateTime Original_Date_From, System.DateTime Original_Date_To, long Original_FD_ID, decimal Original_Duration, decimal Original_Amt_After_Due_Date) {
            return this.Update(Acc_No, Amt, Interest_Rate, Date_From, Date_To, Original_FD_ID, Duration, Amt_After_Due_Date, Original_Acc_No, Original_Amt, Original_Interest_Rate, Original_Date_From, Original_Date_To, Original_FD_ID, Original_Duration, Original_Amt_After_Due_Date);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GuarantorTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GuarantorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Guarantor";
            tableMapping.ColumnMappings.Add("GId", "GId");
            tableMapping.ColumnMappings.Add("GName", "GName");
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate");
            tableMapping.ColumnMappings.Add("Res_Add", "Res_Add");
            tableMapping.ColumnMappings.Add("Off_Add", "Off_Add");
            tableMapping.ColumnMappings.Add("Phone_No", "Phone_No");
            tableMapping.ColumnMappings.Add("Occupation", "Occupation");
            tableMapping.ColumnMappings.Add("Acc_No", "Acc_No");
            tableMapping.ColumnMappings.Add("AppNo", "AppNo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Guarantor] WHERE (([GId] = @Original_GId) AND ([GName] = @Original_GName) AND ([BirthDate] = @Original_BirthDate) AND ([Res_Add] = @Original_Res_Add) AND ((@IsNull_Off_Add = 1 AND [Off_Add] IS NULL) OR ([Off_Add] = @Original_Off_Add)) AND ([Phone_No] = @Original_Phone_No) AND ((@IsNull_Occupation = 1 AND [Occupation] IS NULL) OR ([Occupation] = @Original_Occupation)) AND ((@IsNull_Acc_No = 1 AND [Acc_No] IS NULL) OR ([Acc_No] = @Original_Acc_No)) AND ([AppNo] = @Original_AppNo))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Off_Add", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Phone_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Occupation", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Occupation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Acc_No", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Acc_No", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AppNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Guarantor] SET [GId] = @GId, [GName] = @GName, [BirthDate] = @BirthDate, [Res_Add] = @Res_Add, [Off_Add] = @Off_Add, [Phone_No] = @Phone_No, [Occupation] = @Occupation, [Acc_No] = @Acc_No, [AppNo] = @AppNo WHERE (([GId] = @Original_GId) AND ([GName] = @Original_GName) AND ([BirthDate] = @Original_BirthDate) AND ([Res_Add] = @Original_Res_Add) AND ((@IsNull_Off_Add = 1 AND [Off_Add] IS NULL) OR ([Off_Add] = @Original_Off_Add)) AND ([Phone_No] = @Original_Phone_No) AND ((@IsNull_Occupation = 1 AND [Occupation] IS NULL) OR ([Occupation] = @Original_Occupation)) AND ((@IsNull_Acc_No = 1 AND [Acc_No] IS NULL) OR ([Acc_No] = @Original_Acc_No)) AND ([AppNo] = @Original_AppNo));
SELECT GId, GName, BirthDate, Res_Add, Off_Add, Phone_No, Occupation, Acc_No, AppNo FROM Guarantor WHERE (GId = @GId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Phone_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Phone_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Occupation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AppNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Off_Add", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Phone_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Phone_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Occupation", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Occupation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Acc_No", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Acc_No", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AppNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.BanK_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        GId, GName, BirthDate, Res_Add, Off_Add, Phone_No, Occupation, Acc_" +
                "No, AppNo\r\nFROM            Guarantor";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.GuarantorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.GuarantorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.GuarantorDataTable dataTable = new BankDataSet2.GuarantorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.GuarantorDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "Guarantor");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_GId, string Original_GName, System.DateTime Original_BirthDate, string Original_Res_Add, string Original_Off_Add, decimal Original_Phone_No, string Original_Occupation, global::System.Nullable<decimal> Original_Acc_No, decimal Original_AppNo) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_GId));
            if ((Original_GName == null)) {
                throw new global::System.ArgumentNullException("Original_GName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_GName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_BirthDate));
            if ((Original_Res_Add == null)) {
                throw new global::System.ArgumentNullException("Original_Res_Add");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Res_Add));
            }
            if ((Original_Off_Add == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Off_Add));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_Phone_No));
            if ((Original_Occupation == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Occupation));
            }
            if ((Original_Acc_No.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_Acc_No.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_AppNo));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal GId, 
                    string GName, 
                    System.DateTime BirthDate, 
                    string Res_Add, 
                    string Off_Add, 
                    decimal Phone_No, 
                    string Occupation, 
                    global::System.Nullable<decimal> Acc_No, 
                    decimal AppNo, 
                    decimal Original_GId, 
                    string Original_GName, 
                    System.DateTime Original_BirthDate, 
                    string Original_Res_Add, 
                    string Original_Off_Add, 
                    decimal Original_Phone_No, 
                    string Original_Occupation, 
                    global::System.Nullable<decimal> Original_Acc_No, 
                    decimal Original_AppNo) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(GId));
            if ((GName == null)) {
                throw new global::System.ArgumentNullException("GName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(GName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(BirthDate));
            if ((Res_Add == null)) {
                throw new global::System.ArgumentNullException("Res_Add");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Res_Add));
            }
            if ((Off_Add == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Off_Add));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Phone_No));
            if ((Occupation == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Occupation));
            }
            if ((Acc_No.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Acc_No.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(AppNo));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_GId));
            if ((Original_GName == null)) {
                throw new global::System.ArgumentNullException("Original_GName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_GName));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_BirthDate));
            if ((Original_Res_Add == null)) {
                throw new global::System.ArgumentNullException("Original_Res_Add");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Res_Add));
            }
            if ((Original_Off_Add == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Off_Add));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(Original_Phone_No));
            if ((Original_Occupation == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_Occupation));
            }
            if ((Original_Acc_No.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_Acc_No.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_AppNo));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string GName, 
                    System.DateTime BirthDate, 
                    string Res_Add, 
                    string Off_Add, 
                    decimal Phone_No, 
                    string Occupation, 
                    global::System.Nullable<decimal> Acc_No, 
                    decimal AppNo, 
                    decimal Original_GId, 
                    string Original_GName, 
                    System.DateTime Original_BirthDate, 
                    string Original_Res_Add, 
                    string Original_Off_Add, 
                    decimal Original_Phone_No, 
                    string Original_Occupation, 
                    global::System.Nullable<decimal> Original_Acc_No, 
                    decimal Original_AppNo) {
            return this.Update(Original_GId, GName, BirthDate, Res_Add, Off_Add, Phone_No, Occupation, Acc_No, AppNo, Original_GId, Original_GName, Original_BirthDate, Original_Res_Add, Original_Off_Add, Original_Phone_No, Original_Occupation, Original_Acc_No, Original_AppNo);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LockerTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LockerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Locker";
            tableMapping.ColumnMappings.Add("Acc_No", "Acc_No");
            tableMapping.ColumnMappings.Add("OpeningDate", "OpeningDate");
            tableMapping.ColumnMappings.Add("Deposit_Amt", "Deposit_Amt");
            tableMapping.ColumnMappings.Add("Active", "Active");
            tableMapping.ColumnMappings.Add("LockerNo", "LockerNo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Locker] WHERE (([Acc_No] = @Original_Acc_No) AND ([OpeningDate] = @O" +
                "riginal_OpeningDate) AND ([Deposit_Amt] = @Original_Deposit_Amt) AND ([Active] =" +
                " @Original_Active) AND ([LockerNo] = @Original_LockerNo))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OpeningDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpeningDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deposit_Amt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Deposit_Amt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Active", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LockerNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LockerNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Locker] ([Acc_No], [OpeningDate], [Deposit_Amt], [Active], [LockerNo" +
                "]) VALUES (@Acc_No, @OpeningDate, @Deposit_Amt, @Active, @LockerNo);\r\nSELECT Acc" +
                "_No, OpeningDate, Deposit_Amt, Active, LockerNo FROM Locker WHERE (LockerNo = @L" +
                "ockerNo)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OpeningDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpeningDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deposit_Amt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Deposit_Amt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LockerNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LockerNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Locker] SET [Acc_No] = @Acc_No, [OpeningDate] = @OpeningDate, [Deposit_Amt] = @Deposit_Amt, [Active] = @Active, [LockerNo] = @LockerNo WHERE (([Acc_No] = @Original_Acc_No) AND ([OpeningDate] = @Original_OpeningDate) AND ([Deposit_Amt] = @Original_Deposit_Amt) AND ([Active] = @Original_Active) AND ([LockerNo] = @Original_LockerNo));
SELECT Acc_No, OpeningDate, Deposit_Amt, Active, LockerNo FROM Locker WHERE (LockerNo = @LockerNo)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OpeningDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpeningDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deposit_Amt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Deposit_Amt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Active", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LockerNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LockerNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OpeningDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpeningDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deposit_Amt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Deposit_Amt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Active", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LockerNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LockerNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.BanK_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        Acc_No, OpeningDate, Deposit_Amt, Active, LockerNo\r\nFROM           " +
                " Locker";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.LockerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.LockerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.LockerDataTable dataTable = new BankDataSet2.LockerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.LockerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "Locker");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_Acc_No, System.DateTime Original_OpeningDate, decimal Original_Deposit_Amt, string Original_Active, decimal Original_LockerNo) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_Acc_No));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_OpeningDate));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_Deposit_Amt));
            if ((Original_Active == null)) {
                throw new global::System.ArgumentNullException("Original_Active");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Active));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_LockerNo));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal Acc_No, System.DateTime OpeningDate, decimal Deposit_Amt, string Active, decimal LockerNo) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(Acc_No));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(OpeningDate));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Deposit_Amt));
            if ((Active == null)) {
                throw new global::System.ArgumentNullException("Active");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Active));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(LockerNo));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal Acc_No, System.DateTime OpeningDate, decimal Deposit_Amt, string Active, decimal LockerNo, decimal Original_Acc_No, System.DateTime Original_OpeningDate, decimal Original_Deposit_Amt, string Original_Active, decimal Original_LockerNo) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(Acc_No));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(OpeningDate));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Deposit_Amt));
            if ((Active == null)) {
                throw new global::System.ArgumentNullException("Active");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Active));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(LockerNo));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_Acc_No));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(Original_OpeningDate));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_Deposit_Amt));
            if ((Original_Active == null)) {
                throw new global::System.ArgumentNullException("Original_Active");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Active));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_LockerNo));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal Acc_No, System.DateTime OpeningDate, decimal Deposit_Amt, string Active, decimal Original_Acc_No, System.DateTime Original_OpeningDate, decimal Original_Deposit_Amt, string Original_Active, decimal Original_LockerNo) {
            return this.Update(Acc_No, OpeningDate, Deposit_Amt, Active, Original_LockerNo, Original_Acc_No, Original_OpeningDate, Original_Deposit_Amt, Original_Active, Original_LockerNo);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PasswordMasterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PasswordMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PasswordMaster";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Userpassword", "Userpassword");
            tableMapping.ColumnMappings.Add("DateOfCreated", "DateOfCreated");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [PasswordMaster] WHERE (([UserId] = @Original_UserId) AND ([Userpassw" +
                "ord] = @Original_Userpassword) AND ([DateOfCreated] = @Original_DateOfCreated))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserId", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Userpassword", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Userpassword", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateOfCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateOfCreated", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [PasswordMaster] ([UserId], [Userpassword], [DateOfCreated]) VALUES (" +
                "@UserId, @Userpassword, @DateOfCreated);\r\nSELECT UserId, Userpassword, DateOfCre" +
                "ated FROM PasswordMaster WHERE (UserId = @UserId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Userpassword", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Userpassword", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateOfCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateOfCreated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [PasswordMaster] SET [UserId] = @UserId, [Userpassword] = @Userpassword, [DateOfCreated] = @DateOfCreated WHERE (([UserId] = @Original_UserId) AND ([Userpassword] = @Original_Userpassword) AND ([DateOfCreated] = @Original_DateOfCreated));
SELECT UserId, Userpassword, DateOfCreated FROM PasswordMaster WHERE (UserId = @UserId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Userpassword", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Userpassword", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateOfCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateOfCreated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserId", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Userpassword", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Userpassword", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateOfCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateOfCreated", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.BanK_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        UserId, Userpassword, DateOfCreated\r\nFROM            PasswordMaster" +
                "";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.PasswordMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.PasswordMasterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.PasswordMasterDataTable dataTable = new BankDataSet2.PasswordMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.PasswordMasterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "PasswordMaster");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_UserId, string Original_Userpassword, System.DateTime Original_DateOfCreated) {
            if ((Original_UserId == null)) {
                throw new global::System.ArgumentNullException("Original_UserId");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_UserId));
            }
            if ((Original_Userpassword == null)) {
                throw new global::System.ArgumentNullException("Original_Userpassword");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Userpassword));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_DateOfCreated));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string UserId, string Userpassword, System.DateTime DateOfCreated) {
            if ((UserId == null)) {
                throw new global::System.ArgumentNullException("UserId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(UserId));
            }
            if ((Userpassword == null)) {
                throw new global::System.ArgumentNullException("Userpassword");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Userpassword));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(DateOfCreated));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string UserId, string Userpassword, System.DateTime DateOfCreated, string Original_UserId, string Original_Userpassword, System.DateTime Original_DateOfCreated) {
            if ((UserId == null)) {
                throw new global::System.ArgumentNullException("UserId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(UserId));
            }
            if ((Userpassword == null)) {
                throw new global::System.ArgumentNullException("Userpassword");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Userpassword));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(DateOfCreated));
            if ((Original_UserId == null)) {
                throw new global::System.ArgumentNullException("Original_UserId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_UserId));
            }
            if ((Original_Userpassword == null)) {
                throw new global::System.ArgumentNullException("Original_Userpassword");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Userpassword));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(Original_DateOfCreated));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Userpassword, System.DateTime DateOfCreated, string Original_UserId, string Original_Userpassword, System.DateTime Original_DateOfCreated) {
            return this.Update(Original_UserId, Userpassword, DateOfCreated, Original_UserId, Original_Userpassword, Original_DateOfCreated);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MinorTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MinorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Minor";
            tableMapping.ColumnMappings.Add("Nameofparent", "Nameofparent");
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate");
            tableMapping.ColumnMappings.Add("Res_Add", "Res_Add");
            tableMapping.ColumnMappings.Add("Off_Add", "Off_Add");
            tableMapping.ColumnMappings.Add("Occupation", "Occupation");
            tableMapping.ColumnMappings.Add("Relation", "Relation");
            tableMapping.ColumnMappings.Add("MinorId", "MinorId");
            tableMapping.ColumnMappings.Add("AccNo", "AccNo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Minor] WHERE (([Nameofparent] = @Original_Nameofparent) AND ([BirthDate] = @Original_BirthDate) AND ([Res_Add] = @Original_Res_Add) AND ((@IsNull_Off_Add = 1 AND [Off_Add] IS NULL) OR ([Off_Add] = @Original_Off_Add)) AND ((@IsNull_Occupation = 1 AND [Occupation] IS NULL) OR ([Occupation] = @Original_Occupation)) AND ([Relation] = @Original_Relation) AND ([MinorId] = @Original_MinorId) AND ([AccNo] = @Original_AccNo))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nameofparent", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nameofparent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Off_Add", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Occupation", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Occupation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Relation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Relation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MinorId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "MinorId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Minor] SET [Nameofparent] = @Nameofparent, [BirthDate] = @BirthDate, [Res_Add] = @Res_Add, [Off_Add] = @Off_Add, [Occupation] = @Occupation, [Relation] = @Relation, [MinorId] = @MinorId, [AccNo] = @AccNo WHERE (([Nameofparent] = @Original_Nameofparent) AND ([BirthDate] = @Original_BirthDate) AND ([Res_Add] = @Original_Res_Add) AND ((@IsNull_Off_Add = 1 AND [Off_Add] IS NULL) OR ([Off_Add] = @Original_Off_Add)) AND ((@IsNull_Occupation = 1 AND [Occupation] IS NULL) OR ([Occupation] = @Original_Occupation)) AND ([Relation] = @Original_Relation) AND ([MinorId] = @Original_MinorId) AND ([AccNo] = @Original_AccNo));
SELECT Nameofparent, BirthDate, Res_Add, Off_Add, Occupation, Relation, MinorId, AccNo FROM Minor WHERE (MinorId = @MinorId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nameofparent", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nameofparent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Occupation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Relation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Relation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MinorId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "MinorId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nameofparent", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nameofparent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BirthDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Res_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Res_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Off_Add", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Off_Add", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Off_Add", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Occupation", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Occupation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Occupation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Relation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Relation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MinorId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "MinorId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.BanK_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        Nameofparent, BirthDate, Res_Add, Off_Add, Occupation, Relation, Mi" +
                "norId, AccNo\r\nFROM            Minor";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.MinorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.MinorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.MinorDataTable dataTable = new BankDataSet2.MinorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.MinorDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "Minor");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_Nameofparent, System.DateTime Original_BirthDate, string Original_Res_Add, string Original_Off_Add, string Original_Occupation, string Original_Relation, decimal Original_MinorId, decimal Original_AccNo) {
            if ((Original_Nameofparent == null)) {
                throw new global::System.ArgumentNullException("Original_Nameofparent");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Nameofparent));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_BirthDate));
            if ((Original_Res_Add == null)) {
                throw new global::System.ArgumentNullException("Original_Res_Add");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Res_Add));
            }
            if ((Original_Off_Add == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Off_Add));
            }
            if ((Original_Occupation == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Occupation));
            }
            if ((Original_Relation == null)) {
                throw new global::System.ArgumentNullException("Original_Relation");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Relation));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_MinorId));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_AccNo));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Nameofparent, 
                    System.DateTime BirthDate, 
                    string Res_Add, 
                    string Off_Add, 
                    string Occupation, 
                    string Relation, 
                    decimal MinorId, 
                    decimal AccNo, 
                    string Original_Nameofparent, 
                    System.DateTime Original_BirthDate, 
                    string Original_Res_Add, 
                    string Original_Off_Add, 
                    string Original_Occupation, 
                    string Original_Relation, 
                    decimal Original_MinorId, 
                    decimal Original_AccNo) {
            if ((Nameofparent == null)) {
                throw new global::System.ArgumentNullException("Nameofparent");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Nameofparent));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(BirthDate));
            if ((Res_Add == null)) {
                throw new global::System.ArgumentNullException("Res_Add");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Res_Add));
            }
            if ((Off_Add == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Off_Add));
            }
            if ((Occupation == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Occupation));
            }
            if ((Relation == null)) {
                throw new global::System.ArgumentNullException("Relation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Relation));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(MinorId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(AccNo));
            if ((Original_Nameofparent == null)) {
                throw new global::System.ArgumentNullException("Original_Nameofparent");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Nameofparent));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_BirthDate));
            if ((Original_Res_Add == null)) {
                throw new global::System.ArgumentNullException("Original_Res_Add");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Res_Add));
            }
            if ((Original_Off_Add == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Off_Add));
            }
            if ((Original_Occupation == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Occupation));
            }
            if ((Original_Relation == null)) {
                throw new global::System.ArgumentNullException("Original_Relation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Relation));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(Original_MinorId));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_AccNo));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Nameofparent, System.DateTime BirthDate, string Res_Add, string Off_Add, string Occupation, string Relation, decimal AccNo, string Original_Nameofparent, System.DateTime Original_BirthDate, string Original_Res_Add, string Original_Off_Add, string Original_Occupation, string Original_Relation, decimal Original_MinorId, decimal Original_AccNo) {
            return this.Update(Nameofparent, BirthDate, Res_Add, Off_Add, Occupation, Relation, Original_MinorId, AccNo, Original_Nameofparent, Original_BirthDate, Original_Res_Add, Original_Off_Add, Original_Occupation, Original_Relation, Original_MinorId, Original_AccNo);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HomeStudentLoanTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HomeStudentLoanTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HomeStudentLoan";
            tableMapping.ColumnMappings.Add("AppNo", "AppNo");
            tableMapping.ColumnMappings.Add("Acc_No", "Acc_No");
            tableMapping.ColumnMappings.Add("TargetPropertyAddress", "TargetPropertyAddress");
            tableMapping.ColumnMappings.Add("SavingAmt", "SavingAmt");
            tableMapping.ColumnMappings.Add("ProvidentAmt", "ProvidentAmt");
            tableMapping.ColumnMappings.Add("immovableAmt", "immovableAmt");
            tableMapping.ColumnMappings.Add("LIC_No", "LIC_No");
            tableMapping.ColumnMappings.Add("LICAmt", "LICAmt");
            tableMapping.ColumnMappings.Add("LICMaturityDate", "LICMaturityDate");
            tableMapping.ColumnMappings.Add("AppDate", "AppDate");
            tableMapping.ColumnMappings.Add("LoanAmt", "LoanAmt");
            tableMapping.ColumnMappings.Add("Intrate", "Intrate");
            tableMapping.ColumnMappings.Add("EMI", "EMI");
            tableMapping.ColumnMappings.Add("LoanType", "LoanType");
            tableMapping.ColumnMappings.Add("Salary", "Salary");
            tableMapping.ColumnMappings.Add("No_Of_Installment", "No_Of_Installment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [HomeStudentLoan] WHERE (([AppNo] = @Original_AppNo) AND ([Acc_No] = @Original_Acc_No) AND ((@IsNull_TargetPropertyAddress = 1 AND [TargetPropertyAddress] IS NULL) OR ([TargetPropertyAddress] = @Original_TargetPropertyAddress)) AND ([SavingAmt] = @Original_SavingAmt) AND ([ProvidentAmt] = @Original_ProvidentAmt) AND ([immovableAmt] = @Original_immovableAmt) AND ((@IsNull_LIC_No = 1 AND [LIC_No] IS NULL) OR ([LIC_No] = @Original_LIC_No)) AND ((@IsNull_LICAmt = 1 AND [LICAmt] IS NULL) OR ([LICAmt] = @Original_LICAmt)) AND ((@IsNull_LICMaturityDate = 1 AND [LICMaturityDate] IS NULL) OR ([LICMaturityDate] = @Original_LICMaturityDate)) AND ([AppDate] = @Original_AppDate) AND ([LoanAmt] = @Original_LoanAmt) AND ([Intrate] = @Original_Intrate) AND ([EMI] = @Original_EMI) AND ([LoanType] = @Original_LoanType) AND ([Salary] = @Original_Salary) AND ([No_Of_Installment] = @Original_No_Of_Installment))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AppNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TargetPropertyAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetPropertyAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TargetPropertyAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetPropertyAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SavingAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "SavingAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProvidentAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ProvidentAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_immovableAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "immovableAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LIC_No", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LIC_No", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LIC_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LIC_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LICAmt", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LICAmt", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LICAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LICAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LICMaturityDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LICMaturityDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LICMaturityDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LICMaturityDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LoanAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Intrate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Intrate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LoanType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoanType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Salary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Salary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_No_Of_Installment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "No_Of_Installment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [HomeStudentLoan] ([AppNo], [Acc_No], [TargetPropertyAddress], [SavingAmt], [ProvidentAmt], [immovableAmt], [LIC_No], [LICAmt], [LICMaturityDate], [AppDate], [LoanAmt], [Intrate], [EMI], [LoanType], [Salary], [No_Of_Installment]) VALUES (@AppNo, @Acc_No, @TargetPropertyAddress, @SavingAmt, @ProvidentAmt, @immovableAmt, @LIC_No, @LICAmt, @LICMaturityDate, @AppDate, @LoanAmt, @Intrate, @EMI, @LoanType, @Salary, @No_Of_Installment);
SELECT AppNo, Acc_No, TargetPropertyAddress, SavingAmt, ProvidentAmt, immovableAmt, LIC_No, LICAmt, LICMaturityDate, AppDate, LoanAmt, Intrate, EMI, LoanType, Salary, No_Of_Installment FROM HomeStudentLoan WHERE (AppNo = @AppNo)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AppNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TargetPropertyAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetPropertyAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SavingAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "SavingAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProvidentAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ProvidentAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@immovableAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "immovableAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LIC_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LIC_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LICAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LICAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LICMaturityDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LICMaturityDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoanAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Intrate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Intrate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoanType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoanType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Salary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Salary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@No_Of_Installment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "No_Of_Installment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [HomeStudentLoan] SET [AppNo] = @AppNo, [Acc_No] = @Acc_No, [TargetPropert" +
                "yAddress] = @TargetPropertyAddress, [SavingAmt] = @SavingAmt, [ProvidentAmt] = @" +
                "ProvidentAmt, [immovableAmt] = @immovableAmt, [LIC_No] = @LIC_No, [LICAmt] = @LI" +
                "CAmt, [LICMaturityDate] = @LICMaturityDate, [AppDate] = @AppDate, [LoanAmt] = @L" +
                "oanAmt, [Intrate] = @Intrate, [EMI] = @EMI, [LoanType] = @LoanType, [Salary] = @" +
                "Salary, [No_Of_Installment] = @No_Of_Installment WHERE (([AppNo] = @Original_App" +
                "No) AND ([Acc_No] = @Original_Acc_No) AND ((@IsNull_TargetPropertyAddress = 1 AN" +
                "D [TargetPropertyAddress] IS NULL) OR ([TargetPropertyAddress] = @Original_Targe" +
                "tPropertyAddress)) AND ([SavingAmt] = @Original_SavingAmt) AND ([ProvidentAmt] =" +
                " @Original_ProvidentAmt) AND ([immovableAmt] = @Original_immovableAmt) AND ((@Is" +
                "Null_LIC_No = 1 AND [LIC_No] IS NULL) OR ([LIC_No] = @Original_LIC_No)) AND ((@I" +
                "sNull_LICAmt = 1 AND [LICAmt] IS NULL) OR ([LICAmt] = @Original_LICAmt)) AND ((@" +
                "IsNull_LICMaturityDate = 1 AND [LICMaturityDate] IS NULL) OR ([LICMaturityDate] " +
                "= @Original_LICMaturityDate)) AND ([AppDate] = @Original_AppDate) AND ([LoanAmt]" +
                " = @Original_LoanAmt) AND ([Intrate] = @Original_Intrate) AND ([EMI] = @Original" +
                "_EMI) AND ([LoanType] = @Original_LoanType) AND ([Salary] = @Original_Salary) AN" +
                "D ([No_Of_Installment] = @Original_No_Of_Installment));\r\nSELECT AppNo, Acc_No, T" +
                "argetPropertyAddress, SavingAmt, ProvidentAmt, immovableAmt, LIC_No, LICAmt, LIC" +
                "MaturityDate, AppDate, LoanAmt, Intrate, EMI, LoanType, Salary, No_Of_Installmen" +
                "t FROM HomeStudentLoan WHERE (AppNo = @AppNo)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AppNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TargetPropertyAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetPropertyAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SavingAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "SavingAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProvidentAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ProvidentAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@immovableAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "immovableAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LIC_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LIC_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LICAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LICAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LICMaturityDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LICMaturityDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoanAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Intrate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Intrate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoanType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoanType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Salary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Salary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@No_Of_Installment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "No_Of_Installment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AppNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TargetPropertyAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetPropertyAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TargetPropertyAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetPropertyAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SavingAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "SavingAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProvidentAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ProvidentAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_immovableAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "immovableAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LIC_No", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LIC_No", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LIC_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LIC_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LICAmt", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LICAmt", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LICAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LICAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LICMaturityDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LICMaturityDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LICMaturityDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LICMaturityDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LoanAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Intrate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Intrate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LoanType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoanType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Salary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Salary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_No_Of_Installment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "No_Of_Installment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.BanK_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        AppNo, Acc_No, TargetPropertyAddress, SavingAmt, ProvidentAmt, immo" +
                "vableAmt, LIC_No, LICAmt, LICMaturityDate, AppDate, LoanAmt, Intrate, EMI, LoanT" +
                "ype, \r\n                         Salary, No_Of_Installment\r\nFROM            HomeS" +
                "tudentLoan";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.HomeStudentLoanDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.HomeStudentLoanDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.HomeStudentLoanDataTable dataTable = new BankDataSet2.HomeStudentLoanDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.HomeStudentLoanDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "HomeStudentLoan");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    decimal Original_AppNo, 
                    decimal Original_Acc_No, 
                    string Original_TargetPropertyAddress, 
                    decimal Original_SavingAmt, 
                    decimal Original_ProvidentAmt, 
                    decimal Original_immovableAmt, 
                    global::System.Nullable<decimal> Original_LIC_No, 
                    global::System.Nullable<decimal> Original_LICAmt, 
                    global::System.Nullable<global::System.DateTime> Original_LICMaturityDate, 
                    System.DateTime Original_AppDate, 
                    decimal Original_LoanAmt, 
                    decimal Original_Intrate, 
                    decimal Original_EMI, 
                    string Original_LoanType, 
                    decimal Original_Salary, 
                    decimal Original_No_Of_Installment) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_AppNo));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_Acc_No));
            if ((Original_TargetPropertyAddress == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_TargetPropertyAddress));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_SavingAmt));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_ProvidentAmt));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_immovableAmt));
            if ((Original_LIC_No.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_LIC_No.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_LICAmt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_LICAmt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_LICMaturityDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((System.DateTime)(Original_LICMaturityDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[13].Value = ((System.DateTime)(Original_AppDate));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_LoanAmt));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((decimal)(Original_Intrate));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((decimal)(Original_EMI));
            if ((Original_LoanType == null)) {
                throw new global::System.ArgumentNullException("Original_LoanType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_LoanType));
            }
            this.Adapter.DeleteCommand.Parameters[18].Value = ((decimal)(Original_Salary));
            this.Adapter.DeleteCommand.Parameters[19].Value = ((decimal)(Original_No_Of_Installment));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    decimal AppNo, 
                    decimal Acc_No, 
                    string TargetPropertyAddress, 
                    decimal SavingAmt, 
                    decimal ProvidentAmt, 
                    decimal immovableAmt, 
                    global::System.Nullable<decimal> LIC_No, 
                    global::System.Nullable<decimal> LICAmt, 
                    global::System.Nullable<global::System.DateTime> LICMaturityDate, 
                    System.DateTime AppDate, 
                    decimal LoanAmt, 
                    decimal Intrate, 
                    decimal EMI, 
                    string LoanType, 
                    decimal Salary, 
                    decimal No_Of_Installment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(AppNo));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(Acc_No));
            if ((TargetPropertyAddress == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TargetPropertyAddress));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(SavingAmt));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(ProvidentAmt));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(immovableAmt));
            if ((LIC_No.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(LIC_No.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((LICAmt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(LICAmt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((LICMaturityDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(LICMaturityDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(AppDate));
            this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(LoanAmt));
            this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(Intrate));
            this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(EMI));
            if ((LoanType == null)) {
                throw new global::System.ArgumentNullException("LoanType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(LoanType));
            }
            this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(Salary));
            this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(No_Of_Installment));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal AppNo, 
                    decimal Acc_No, 
                    string TargetPropertyAddress, 
                    decimal SavingAmt, 
                    decimal ProvidentAmt, 
                    decimal immovableAmt, 
                    global::System.Nullable<decimal> LIC_No, 
                    global::System.Nullable<decimal> LICAmt, 
                    global::System.Nullable<global::System.DateTime> LICMaturityDate, 
                    System.DateTime AppDate, 
                    decimal LoanAmt, 
                    decimal Intrate, 
                    decimal EMI, 
                    string LoanType, 
                    decimal Salary, 
                    decimal No_Of_Installment, 
                    decimal Original_AppNo, 
                    decimal Original_Acc_No, 
                    string Original_TargetPropertyAddress, 
                    decimal Original_SavingAmt, 
                    decimal Original_ProvidentAmt, 
                    decimal Original_immovableAmt, 
                    global::System.Nullable<decimal> Original_LIC_No, 
                    global::System.Nullable<decimal> Original_LICAmt, 
                    global::System.Nullable<global::System.DateTime> Original_LICMaturityDate, 
                    System.DateTime Original_AppDate, 
                    decimal Original_LoanAmt, 
                    decimal Original_Intrate, 
                    decimal Original_EMI, 
                    string Original_LoanType, 
                    decimal Original_Salary, 
                    decimal Original_No_Of_Installment) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(AppNo));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Acc_No));
            if ((TargetPropertyAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TargetPropertyAddress));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(SavingAmt));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(ProvidentAmt));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(immovableAmt));
            if ((LIC_No.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(LIC_No.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((LICAmt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(LICAmt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((LICMaturityDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(LICMaturityDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(AppDate));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(LoanAmt));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(Intrate));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(EMI));
            if ((LoanType == null)) {
                throw new global::System.ArgumentNullException("LoanType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(LoanType));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Salary));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(No_Of_Installment));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(Original_AppNo));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_Acc_No));
            if ((Original_TargetPropertyAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_TargetPropertyAddress));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_SavingAmt));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(Original_ProvidentAmt));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Original_immovableAmt));
            if ((Original_LIC_No.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(Original_LIC_No.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_LICAmt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((decimal)(Original_LICAmt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_LICMaturityDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((System.DateTime)(Original_LICMaturityDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[29].Value = ((System.DateTime)(Original_AppDate));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((decimal)(Original_LoanAmt));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((decimal)(Original_Intrate));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(Original_EMI));
            if ((Original_LoanType == null)) {
                throw new global::System.ArgumentNullException("Original_LoanType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_LoanType));
            }
            this.Adapter.UpdateCommand.Parameters[34].Value = ((decimal)(Original_Salary));
            this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(Original_No_Of_Installment));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal Acc_No, 
                    string TargetPropertyAddress, 
                    decimal SavingAmt, 
                    decimal ProvidentAmt, 
                    decimal immovableAmt, 
                    global::System.Nullable<decimal> LIC_No, 
                    global::System.Nullable<decimal> LICAmt, 
                    global::System.Nullable<global::System.DateTime> LICMaturityDate, 
                    System.DateTime AppDate, 
                    decimal LoanAmt, 
                    decimal Intrate, 
                    decimal EMI, 
                    string LoanType, 
                    decimal Salary, 
                    decimal No_Of_Installment, 
                    decimal Original_AppNo, 
                    decimal Original_Acc_No, 
                    string Original_TargetPropertyAddress, 
                    decimal Original_SavingAmt, 
                    decimal Original_ProvidentAmt, 
                    decimal Original_immovableAmt, 
                    global::System.Nullable<decimal> Original_LIC_No, 
                    global::System.Nullable<decimal> Original_LICAmt, 
                    global::System.Nullable<global::System.DateTime> Original_LICMaturityDate, 
                    System.DateTime Original_AppDate, 
                    decimal Original_LoanAmt, 
                    decimal Original_Intrate, 
                    decimal Original_EMI, 
                    string Original_LoanType, 
                    decimal Original_Salary, 
                    decimal Original_No_Of_Installment) {
            return this.Update(Original_AppNo, Acc_No, TargetPropertyAddress, SavingAmt, ProvidentAmt, immovableAmt, LIC_No, LICAmt, LICMaturityDate, AppDate, LoanAmt, Intrate, EMI, LoanType, Salary, No_Of_Installment, Original_AppNo, Original_Acc_No, Original_TargetPropertyAddress, Original_SavingAmt, Original_ProvidentAmt, Original_immovableAmt, Original_LIC_No, Original_LICAmt, Original_LICMaturityDate, Original_AppDate, Original_LoanAmt, Original_Intrate, Original_EMI, Original_LoanType, Original_Salary, Original_No_Of_Installment);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LoanTransactionTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LoanTransactionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LoanTransaction";
            tableMapping.ColumnMappings.Add("AccNo", "AccNo");
            tableMapping.ColumnMappings.Add("Balance", "Balance");
            tableMapping.ColumnMappings.Add("EMI", "EMI");
            tableMapping.ColumnMappings.Add("Interestrate", "Interestrate");
            tableMapping.ColumnMappings.Add("TransactionWay", "TransactionWay");
            tableMapping.ColumnMappings.Add("LoanTransactionNo", "LoanTransactionNo");
            tableMapping.ColumnMappings.Add("Loantype", "Loantype");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [LoanTransaction] WHERE (([AccNo] = @Original_AccNo) AND ([Balance] = @Original_Balance) AND ([EMI] = @Original_EMI) AND ([Interestrate] = @Original_Interestrate) AND ([TransactionWay] = @Original_TransactionWay) AND ([LoanTransactionNo] = @Original_LoanTransactionNo) AND ([Loantype] = @Original_Loantype))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Balance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Balance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Interestrate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Interestrate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransactionWay", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionWay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LoanTransactionNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanTransactionNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Loantype", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Loantype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [LoanTransaction] ([AccNo], [Balance], [EMI], [Interestrate], [TransactionWay], [LoanTransactionNo], [Loantype]) VALUES (@AccNo, @Balance, @EMI, @Interestrate, @TransactionWay, @LoanTransactionNo, @Loantype);
SELECT AccNo, Balance, EMI, Interestrate, TransactionWay, LoanTransactionNo, Loantype FROM LoanTransaction WHERE (LoanTransactionNo = @LoanTransactionNo)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Balance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Balance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Interestrate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Interestrate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionWay", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionWay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoanTransactionNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanTransactionNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Loantype", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Loantype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [LoanTransaction] SET [AccNo] = @AccNo, [Balance] = @Balance, [EMI] = @EMI, [Interestrate] = @Interestrate, [TransactionWay] = @TransactionWay, [LoanTransactionNo] = @LoanTransactionNo, [Loantype] = @Loantype WHERE (([AccNo] = @Original_AccNo) AND ([Balance] = @Original_Balance) AND ([EMI] = @Original_EMI) AND ([Interestrate] = @Original_Interestrate) AND ([TransactionWay] = @Original_TransactionWay) AND ([LoanTransactionNo] = @Original_LoanTransactionNo) AND ([Loantype] = @Original_Loantype));
SELECT AccNo, Balance, EMI, Interestrate, TransactionWay, LoanTransactionNo, Loantype FROM LoanTransaction WHERE (LoanTransactionNo = @LoanTransactionNo)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Balance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Balance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Interestrate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Interestrate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionWay", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionWay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoanTransactionNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanTransactionNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Loantype", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Loantype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Balance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Balance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Interestrate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Interestrate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransactionWay", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionWay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LoanTransactionNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanTransactionNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Loantype", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Loantype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.BanK_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        LoanTransaction.*\r\nFROM            LoanTransaction";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT        AccNo, Balance, EMI, Interestrate, TransactionWay, LoanTransactionN" +
                "o, Loantype\r\nFROM            LoanTransaction";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.LoanTransactionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.LoanTransactionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.LoanTransactionDataTable dataTable = new BankDataSet2.LoanTransactionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(BankDataSet2.LoanTransactionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.LoanTransactionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "LoanTransaction");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_AccNo, decimal Original_Balance, decimal Original_EMI, decimal Original_Interestrate, string Original_TransactionWay, decimal Original_LoanTransactionNo, string Original_Loantype) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_AccNo));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_Balance));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_EMI));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_Interestrate));
            if ((Original_TransactionWay == null)) {
                throw new global::System.ArgumentNullException("Original_TransactionWay");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_TransactionWay));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_LoanTransactionNo));
            if ((Original_Loantype == null)) {
                throw new global::System.ArgumentNullException("Original_Loantype");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Loantype));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal AccNo, decimal Balance, decimal EMI, decimal Interestrate, string TransactionWay, decimal LoanTransactionNo, string Loantype) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(AccNo));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(Balance));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(EMI));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(Interestrate));
            if ((TransactionWay == null)) {
                throw new global::System.ArgumentNullException("TransactionWay");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(TransactionWay));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(LoanTransactionNo));
            if ((Loantype == null)) {
                throw new global::System.ArgumentNullException("Loantype");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Loantype));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal AccNo, decimal Balance, decimal EMI, decimal Interestrate, string TransactionWay, decimal LoanTransactionNo, string Loantype, decimal Original_AccNo, decimal Original_Balance, decimal Original_EMI, decimal Original_Interestrate, string Original_TransactionWay, decimal Original_LoanTransactionNo, string Original_Loantype) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(AccNo));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Balance));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(EMI));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Interestrate));
            if ((TransactionWay == null)) {
                throw new global::System.ArgumentNullException("TransactionWay");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(TransactionWay));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(LoanTransactionNo));
            if ((Loantype == null)) {
                throw new global::System.ArgumentNullException("Loantype");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Loantype));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_AccNo));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_Balance));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_EMI));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(Original_Interestrate));
            if ((Original_TransactionWay == null)) {
                throw new global::System.ArgumentNullException("Original_TransactionWay");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_TransactionWay));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_LoanTransactionNo));
            if ((Original_Loantype == null)) {
                throw new global::System.ArgumentNullException("Original_Loantype");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Loantype));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal AccNo, decimal Balance, decimal EMI, decimal Interestrate, string TransactionWay, string Loantype, decimal Original_AccNo, decimal Original_Balance, decimal Original_EMI, decimal Original_Interestrate, string Original_TransactionWay, decimal Original_LoanTransactionNo, string Original_Loantype) {
            return this.Update(AccNo, Balance, EMI, Interestrate, TransactionWay, Original_LoanTransactionNo, Loantype, Original_AccNo, Original_Balance, Original_EMI, Original_Interestrate, Original_TransactionWay, Original_LoanTransactionNo, Original_Loantype);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StudentLoanTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StudentLoanTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "StudentLoan";
            tableMapping.ColumnMappings.Add("AppNo", "AppNo");
            tableMapping.ColumnMappings.Add("Acc_No", "Acc_No");
            tableMapping.ColumnMappings.Add("PassedYear", "PassedYear");
            tableMapping.ColumnMappings.Add("passedMarks", "passedMarks");
            tableMapping.ColumnMappings.Add("Division", "Division");
            tableMapping.ColumnMappings.Add("OtherScholarship", "OtherScholarship");
            tableMapping.ColumnMappings.Add("ProposedCourse", "ProposedCourse");
            tableMapping.ColumnMappings.Add("Duration", "Duration");
            tableMapping.ColumnMappings.Add("CollegeName", "CollegeName");
            tableMapping.ColumnMappings.Add("CollegeAddress", "CollegeAddress");
            tableMapping.ColumnMappings.Add("LoanAmt", "LoanAmt");
            tableMapping.ColumnMappings.Add("intRate", "intRate");
            tableMapping.ColumnMappings.Add("EMI", "EMI");
            tableMapping.ColumnMappings.Add("PassedExam", "PassedExam");
            tableMapping.ColumnMappings.Add("TotalFees", "TotalFees");
            tableMapping.ColumnMappings.Add("AppDate", "AppDate");
            tableMapping.ColumnMappings.Add("Salary", "Salary");
            tableMapping.ColumnMappings.Add("No_Of_Installment", "No_Of_Installment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [StudentLoan] WHERE (([AppNo] = @Original_AppNo) AND ([Acc_No] = @Original_Acc_No) AND ([PassedYear] = @Original_PassedYear) AND ([passedMarks] = @Original_passedMarks) AND ([Division] = @Original_Division) AND ([OtherScholarship] = @Original_OtherScholarship) AND ([ProposedCourse] = @Original_ProposedCourse) AND ([Duration] = @Original_Duration) AND ([CollegeName] = @Original_CollegeName) AND ([CollegeAddress] = @Original_CollegeAddress) AND ([LoanAmt] = @Original_LoanAmt) AND ([intRate] = @Original_intRate) AND ([EMI] = @Original_EMI) AND ([PassedExam] = @Original_PassedExam) AND ([TotalFees] = @Original_TotalFees) AND ([AppDate] = @Original_AppDate) AND ([Salary] = @Original_Salary) AND ([No_Of_Installment] = @Original_No_Of_Installment))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AppNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PassedYear", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassedYear", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_passedMarks", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "passedMarks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Division", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Division", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OtherScholarship", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherScholarship", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProposedCourse", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProposedCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Duration", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Duration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CollegeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CollegeName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CollegeAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CollegeAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LoanAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_intRate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "intRate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PassedExam", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassedExam", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalFees", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalFees", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Salary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Salary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_No_Of_Installment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "No_Of_Installment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [StudentLoan] ([AppNo], [Acc_No], [PassedYear], [passedMarks], [Division], [OtherScholarship], [ProposedCourse], [Duration], [CollegeName], [CollegeAddress], [LoanAmt], [intRate], [EMI], [PassedExam], [TotalFees], [AppDate], [Salary], [No_Of_Installment]) VALUES (@AppNo, @Acc_No, @PassedYear, @passedMarks, @Division, @OtherScholarship, @ProposedCourse, @Duration, @CollegeName, @CollegeAddress, @LoanAmt, @intRate, @EMI, @PassedExam, @TotalFees, @AppDate, @Salary, @No_Of_Installment);
SELECT AppNo, Acc_No, PassedYear, passedMarks, Division, OtherScholarship, ProposedCourse, Duration, CollegeName, CollegeAddress, LoanAmt, intRate, EMI, PassedExam, TotalFees, AppDate, Salary, No_Of_Installment FROM StudentLoan WHERE (AppNo = @AppNo)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AppNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassedYear", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassedYear", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@passedMarks", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "passedMarks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Division", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Division", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherScholarship", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherScholarship", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProposedCourse", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProposedCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Duration", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Duration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CollegeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CollegeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CollegeAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CollegeAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoanAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@intRate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "intRate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassedExam", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassedExam", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalFees", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalFees", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Salary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Salary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@No_Of_Installment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "No_Of_Installment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [StudentLoan] SET [AppNo] = @AppNo, [Acc_No] = @Acc_No, [PassedYear] = @PassedYear, [passedMarks] = @passedMarks, [Division] = @Division, [OtherScholarship] = @OtherScholarship, [ProposedCourse] = @ProposedCourse, [Duration] = @Duration, [CollegeName] = @CollegeName, [CollegeAddress] = @CollegeAddress, [LoanAmt] = @LoanAmt, [intRate] = @intRate, [EMI] = @EMI, [PassedExam] = @PassedExam, [TotalFees] = @TotalFees, [AppDate] = @AppDate, [Salary] = @Salary, [No_Of_Installment] = @No_Of_Installment WHERE (([AppNo] = @Original_AppNo) AND ([Acc_No] = @Original_Acc_No) AND ([PassedYear] = @Original_PassedYear) AND ([passedMarks] = @Original_passedMarks) AND ([Division] = @Original_Division) AND ([OtherScholarship] = @Original_OtherScholarship) AND ([ProposedCourse] = @Original_ProposedCourse) AND ([Duration] = @Original_Duration) AND ([CollegeName] = @Original_CollegeName) AND ([CollegeAddress] = @Original_CollegeAddress) AND ([LoanAmt] = @Original_LoanAmt) AND ([intRate] = @Original_intRate) AND ([EMI] = @Original_EMI) AND ([PassedExam] = @Original_PassedExam) AND ([TotalFees] = @Original_TotalFees) AND ([AppDate] = @Original_AppDate) AND ([Salary] = @Original_Salary) AND ([No_Of_Installment] = @Original_No_Of_Installment));
SELECT AppNo, Acc_No, PassedYear, passedMarks, Division, OtherScholarship, ProposedCourse, Duration, CollegeName, CollegeAddress, LoanAmt, intRate, EMI, PassedExam, TotalFees, AppDate, Salary, No_Of_Installment FROM StudentLoan WHERE (AppNo = @AppNo)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AppNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassedYear", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassedYear", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@passedMarks", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "passedMarks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Division", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Division", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherScholarship", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherScholarship", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProposedCourse", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProposedCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Duration", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Duration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CollegeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CollegeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CollegeAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CollegeAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoanAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanAmt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@intRate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "intRate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassedExam", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassedExam", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalFees", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalFees", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Salary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Salary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@No_Of_Installment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "No_Of_Installment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AppNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Acc_No", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Acc_No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PassedYear", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassedYear", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_passedMarks", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "passedMarks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Division", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Division", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OtherScholarship", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherScholarship", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProposedCourse", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProposedCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Duration", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Duration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CollegeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CollegeName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CollegeAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CollegeAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LoanAmt", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LoanAmt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_intRate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "intRate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMI", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EMI", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PassedExam", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassedExam", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalFees", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalFees", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Salary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Salary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_No_Of_Installment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "No_Of_Installment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.BanK_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        StudentLoan.*\r\nFROM            StudentLoan";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.StudentLoanDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.StudentLoanDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.StudentLoanDataTable dataTable = new BankDataSet2.StudentLoanDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.StudentLoanDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "StudentLoan");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    decimal Original_AppNo, 
                    decimal Original_Acc_No, 
                    System.DateTime Original_PassedYear, 
                    decimal Original_passedMarks, 
                    string Original_Division, 
                    string Original_OtherScholarship, 
                    string Original_ProposedCourse, 
                    decimal Original_Duration, 
                    string Original_CollegeName, 
                    string Original_CollegeAddress, 
                    decimal Original_LoanAmt, 
                    decimal Original_intRate, 
                    decimal Original_EMI, 
                    string Original_PassedExam, 
                    decimal Original_TotalFees, 
                    System.DateTime Original_AppDate, 
                    decimal Original_Salary, 
                    decimal Original_No_Of_Installment) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_AppNo));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_Acc_No));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_PassedYear));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_passedMarks));
            if ((Original_Division == null)) {
                throw new global::System.ArgumentNullException("Original_Division");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Division));
            }
            if ((Original_OtherScholarship == null)) {
                throw new global::System.ArgumentNullException("Original_OtherScholarship");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_OtherScholarship));
            }
            if ((Original_ProposedCourse == null)) {
                throw new global::System.ArgumentNullException("Original_ProposedCourse");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ProposedCourse));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_Duration));
            if ((Original_CollegeName == null)) {
                throw new global::System.ArgumentNullException("Original_CollegeName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_CollegeName));
            }
            if ((Original_CollegeAddress == null)) {
                throw new global::System.ArgumentNullException("Original_CollegeAddress");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_CollegeAddress));
            }
            this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_LoanAmt));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_intRate));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_EMI));
            if ((Original_PassedExam == null)) {
                throw new global::System.ArgumentNullException("Original_PassedExam");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_PassedExam));
            }
            this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_TotalFees));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((System.DateTime)(Original_AppDate));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((decimal)(Original_Salary));
            this.Adapter.DeleteCommand.Parameters[17].Value = ((decimal)(Original_No_Of_Installment));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    decimal AppNo, 
                    decimal Acc_No, 
                    System.DateTime PassedYear, 
                    decimal passedMarks, 
                    string Division, 
                    string OtherScholarship, 
                    string ProposedCourse, 
                    decimal Duration, 
                    string CollegeName, 
                    string CollegeAddress, 
                    decimal LoanAmt, 
                    decimal intRate, 
                    decimal EMI, 
                    string PassedExam, 
                    decimal TotalFees, 
                    System.DateTime AppDate, 
                    decimal Salary, 
                    decimal No_Of_Installment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(AppNo));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(Acc_No));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(PassedYear));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(passedMarks));
            if ((Division == null)) {
                throw new global::System.ArgumentNullException("Division");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Division));
            }
            if ((OtherScholarship == null)) {
                throw new global::System.ArgumentNullException("OtherScholarship");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(OtherScholarship));
            }
            if ((ProposedCourse == null)) {
                throw new global::System.ArgumentNullException("ProposedCourse");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ProposedCourse));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(Duration));
            if ((CollegeName == null)) {
                throw new global::System.ArgumentNullException("CollegeName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CollegeName));
            }
            if ((CollegeAddress == null)) {
                throw new global::System.ArgumentNullException("CollegeAddress");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(CollegeAddress));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(LoanAmt));
            this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(intRate));
            this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(EMI));
            if ((PassedExam == null)) {
                throw new global::System.ArgumentNullException("PassedExam");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(PassedExam));
            }
            this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(TotalFees));
            this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(AppDate));
            this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(Salary));
            this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(No_Of_Installment));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal AppNo, 
                    decimal Acc_No, 
                    System.DateTime PassedYear, 
                    decimal passedMarks, 
                    string Division, 
                    string OtherScholarship, 
                    string ProposedCourse, 
                    decimal Duration, 
                    string CollegeName, 
                    string CollegeAddress, 
                    decimal LoanAmt, 
                    decimal intRate, 
                    decimal EMI, 
                    string PassedExam, 
                    decimal TotalFees, 
                    System.DateTime AppDate, 
                    decimal Salary, 
                    decimal No_Of_Installment, 
                    decimal Original_AppNo, 
                    decimal Original_Acc_No, 
                    System.DateTime Original_PassedYear, 
                    decimal Original_passedMarks, 
                    string Original_Division, 
                    string Original_OtherScholarship, 
                    string Original_ProposedCourse, 
                    decimal Original_Duration, 
                    string Original_CollegeName, 
                    string Original_CollegeAddress, 
                    decimal Original_LoanAmt, 
                    decimal Original_intRate, 
                    decimal Original_EMI, 
                    string Original_PassedExam, 
                    decimal Original_TotalFees, 
                    System.DateTime Original_AppDate, 
                    decimal Original_Salary, 
                    decimal Original_No_Of_Installment) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(AppNo));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Acc_No));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(PassedYear));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(passedMarks));
            if ((Division == null)) {
                throw new global::System.ArgumentNullException("Division");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Division));
            }
            if ((OtherScholarship == null)) {
                throw new global::System.ArgumentNullException("OtherScholarship");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(OtherScholarship));
            }
            if ((ProposedCourse == null)) {
                throw new global::System.ArgumentNullException("ProposedCourse");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ProposedCourse));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Duration));
            if ((CollegeName == null)) {
                throw new global::System.ArgumentNullException("CollegeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(CollegeName));
            }
            if ((CollegeAddress == null)) {
                throw new global::System.ArgumentNullException("CollegeAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(CollegeAddress));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(LoanAmt));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(intRate));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(EMI));
            if ((PassedExam == null)) {
                throw new global::System.ArgumentNullException("PassedExam");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(PassedExam));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(TotalFees));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(AppDate));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(Salary));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(No_Of_Installment));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_AppNo));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_Acc_No));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(Original_PassedYear));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(Original_passedMarks));
            if ((Original_Division == null)) {
                throw new global::System.ArgumentNullException("Original_Division");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_Division));
            }
            if ((Original_OtherScholarship == null)) {
                throw new global::System.ArgumentNullException("Original_OtherScholarship");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_OtherScholarship));
            }
            if ((Original_ProposedCourse == null)) {
                throw new global::System.ArgumentNullException("Original_ProposedCourse");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_ProposedCourse));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(Original_Duration));
            if ((Original_CollegeName == null)) {
                throw new global::System.ArgumentNullException("Original_CollegeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_CollegeName));
            }
            if ((Original_CollegeAddress == null)) {
                throw new global::System.ArgumentNullException("Original_CollegeAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_CollegeAddress));
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((decimal)(Original_LoanAmt));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(Original_intRate));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((decimal)(Original_EMI));
            if ((Original_PassedExam == null)) {
                throw new global::System.ArgumentNullException("Original_PassedExam");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_PassedExam));
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(Original_TotalFees));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((System.DateTime)(Original_AppDate));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((decimal)(Original_Salary));
            this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(Original_No_Of_Installment));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal Acc_No, 
                    System.DateTime PassedYear, 
                    decimal passedMarks, 
                    string Division, 
                    string OtherScholarship, 
                    string ProposedCourse, 
                    decimal Duration, 
                    string CollegeName, 
                    string CollegeAddress, 
                    decimal LoanAmt, 
                    decimal intRate, 
                    decimal EMI, 
                    string PassedExam, 
                    decimal TotalFees, 
                    System.DateTime AppDate, 
                    decimal Salary, 
                    decimal No_Of_Installment, 
                    decimal Original_AppNo, 
                    decimal Original_Acc_No, 
                    System.DateTime Original_PassedYear, 
                    decimal Original_passedMarks, 
                    string Original_Division, 
                    string Original_OtherScholarship, 
                    string Original_ProposedCourse, 
                    decimal Original_Duration, 
                    string Original_CollegeName, 
                    string Original_CollegeAddress, 
                    decimal Original_LoanAmt, 
                    decimal Original_intRate, 
                    decimal Original_EMI, 
                    string Original_PassedExam, 
                    decimal Original_TotalFees, 
                    System.DateTime Original_AppDate, 
                    decimal Original_Salary, 
                    decimal Original_No_Of_Installment) {
            return this.Update(Original_AppNo, Acc_No, PassedYear, passedMarks, Division, OtherScholarship, ProposedCourse, Duration, CollegeName, CollegeAddress, LoanAmt, intRate, EMI, PassedExam, TotalFees, AppDate, Salary, No_Of_Installment, Original_AppNo, Original_Acc_No, Original_PassedYear, Original_passedMarks, Original_Division, Original_OtherScholarship, Original_ProposedCourse, Original_Duration, Original_CollegeName, Original_CollegeAddress, Original_LoanAmt, Original_intRate, Original_EMI, Original_PassedExam, Original_TotalFees, Original_AppDate, Original_Salary, Original_No_Of_Installment);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TransactionTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TransactionTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TransactionTable";
            tableMapping.ColumnMappings.Add("AccNo", "AccNo");
            tableMapping.ColumnMappings.Add("TransactionNo", "TransactionNo");
            tableMapping.ColumnMappings.Add("Balance", "Balance");
            tableMapping.ColumnMappings.Add("TransactionWay", "TransactionWay");
            tableMapping.ColumnMappings.Add("Deposit", "Deposit");
            tableMapping.ColumnMappings.Add("Withdrawl", "Withdrawl");
            tableMapping.ColumnMappings.Add("TransactionDate", "TransactionDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [TransactionTable] WHERE (([AccNo] = @Original_AccNo) AND ([TransactionNo] = @Original_TransactionNo) AND ([Balance] = @Original_Balance) AND ([TransactionWay] = @Original_TransactionWay) AND ((@IsNull_Deposit = 1 AND [Deposit] IS NULL) OR ([Deposit] = @Original_Deposit)) AND ((@IsNull_Withdrawl = 1 AND [Withdrawl] IS NULL) OR ([Withdrawl] = @Original_Withdrawl)) AND ([TransactionDate] = @Original_TransactionDate))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransactionNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TransactionNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Balance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Balance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransactionWay", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionWay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Deposit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deposit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deposit", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Deposit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Withdrawl", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Withdrawl", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Withdrawl", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Withdrawl", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransactionDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TransactionTable] ([AccNo], [TransactionNo], [Balance], [TransactionWay], [Deposit], [Withdrawl], [TransactionDate]) VALUES (@AccNo, @TransactionNo, @Balance, @TransactionWay, @Deposit, @Withdrawl, @TransactionDate);
SELECT AccNo, TransactionNo, Balance, TransactionWay, Deposit, Withdrawl, TransactionDate FROM TransactionTable WHERE (TransactionNo = @TransactionNo)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TransactionNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Balance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Balance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionWay", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionWay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deposit", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Deposit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Withdrawl", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Withdrawl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [TransactionTable] SET [AccNo] = @AccNo, [TransactionNo] = @TransactionNo, [Balance] = @Balance, [TransactionWay] = @TransactionWay, [Deposit] = @Deposit, [Withdrawl] = @Withdrawl, [TransactionDate] = @TransactionDate WHERE (([AccNo] = @Original_AccNo) AND ([TransactionNo] = @Original_TransactionNo) AND ([Balance] = @Original_Balance) AND ([TransactionWay] = @Original_TransactionWay) AND ((@IsNull_Deposit = 1 AND [Deposit] IS NULL) OR ([Deposit] = @Original_Deposit)) AND ((@IsNull_Withdrawl = 1 AND [Withdrawl] IS NULL) OR ([Withdrawl] = @Original_Withdrawl)) AND ([TransactionDate] = @Original_TransactionDate));
SELECT AccNo, TransactionNo, Balance, TransactionWay, Deposit, Withdrawl, TransactionDate FROM TransactionTable WHERE (TransactionNo = @TransactionNo)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TransactionNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Balance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Balance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionWay", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionWay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deposit", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Deposit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Withdrawl", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Withdrawl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransactionNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TransactionNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Balance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Balance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransactionWay", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionWay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Deposit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deposit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deposit", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Deposit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Withdrawl", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Withdrawl", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Withdrawl", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Withdrawl", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransactionDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Bank.Properties.Settings.Default.BanK_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        TransactionTable.*\r\nFROM            TransactionTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BankDataSet2.TransactionTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BankDataSet2.TransactionTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BankDataSet2.TransactionTableDataTable dataTable = new BankDataSet2.TransactionTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2.TransactionTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BankDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "TransactionTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_AccNo, decimal Original_TransactionNo, decimal Original_Balance, string Original_TransactionWay, global::System.Nullable<decimal> Original_Deposit, global::System.Nullable<decimal> Original_Withdrawl, System.DateTime Original_TransactionDate) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_AccNo));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_TransactionNo));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_Balance));
            if ((Original_TransactionWay == null)) {
                throw new global::System.ArgumentNullException("Original_TransactionWay");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_TransactionWay));
            }
            if ((Original_Deposit.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_Deposit.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_Withdrawl.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_Withdrawl.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_TransactionDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal AccNo, decimal TransactionNo, decimal Balance, string TransactionWay, global::System.Nullable<decimal> Deposit, global::System.Nullable<decimal> Withdrawl, System.DateTime TransactionDate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(AccNo));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(TransactionNo));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Balance));
            if ((TransactionWay == null)) {
                throw new global::System.ArgumentNullException("TransactionWay");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TransactionWay));
            }
            if ((Deposit.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(Deposit.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Withdrawl.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Withdrawl.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(TransactionDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal AccNo, decimal TransactionNo, decimal Balance, string TransactionWay, global::System.Nullable<decimal> Deposit, global::System.Nullable<decimal> Withdrawl, System.DateTime TransactionDate, decimal Original_AccNo, decimal Original_TransactionNo, decimal Original_Balance, string Original_TransactionWay, global::System.Nullable<decimal> Original_Deposit, global::System.Nullable<decimal> Original_Withdrawl, System.DateTime Original_TransactionDate) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(AccNo));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(TransactionNo));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Balance));
            if ((TransactionWay == null)) {
                throw new global::System.ArgumentNullException("TransactionWay");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TransactionWay));
            }
            if ((Deposit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Deposit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Withdrawl.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Withdrawl.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(TransactionDate));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_AccNo));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_TransactionNo));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_Balance));
            if ((Original_TransactionWay == null)) {
                throw new global::System.ArgumentNullException("Original_TransactionWay");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_TransactionWay));
            }
            if ((Original_Deposit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_Deposit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_Withdrawl.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Withdrawl.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(Original_TransactionDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal AccNo, decimal Balance, string TransactionWay, global::System.Nullable<decimal> Deposit, global::System.Nullable<decimal> Withdrawl, System.DateTime TransactionDate, decimal Original_AccNo, decimal Original_TransactionNo, decimal Original_Balance, string Original_TransactionWay, global::System.Nullable<decimal> Original_Deposit, global::System.Nullable<decimal> Original_Withdrawl, System.DateTime Original_TransactionDate) {
            return this.Update(AccNo, Original_TransactionNo, Balance, TransactionWay, Deposit, Withdrawl, TransactionDate, Original_AccNo, Original_TransactionNo, Original_Balance, Original_TransactionWay, Original_Deposit, Original_Withdrawl, Original_TransactionDate);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private JointHolderTableAdapter _jointHolderTableAdapter;
        
        private AccountMasterTableAdapter _accountMasterTableAdapter;
        
        private ChequeBookTableAdapter _chequeBookTableAdapter;
        
        private FixedDepositeTableAdapter _fixedDepositeTableAdapter;
        
        private GuarantorTableAdapter _guarantorTableAdapter;
        
        private LockerTableAdapter _lockerTableAdapter;
        
        private PasswordMasterTableAdapter _passwordMasterTableAdapter;
        
        private MinorTableAdapter _minorTableAdapter;
        
        private HomeStudentLoanTableAdapter _homeStudentLoanTableAdapter;
        
        private LoanTransactionTableAdapter _loanTransactionTableAdapter;
        
        private StudentLoanTableAdapter _studentLoanTableAdapter;
        
        private TransactionTableTableAdapter _transactionTableTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public JointHolderTableAdapter JointHolderTableAdapter {
            get {
                return this._jointHolderTableAdapter;
            }
            set {
                this._jointHolderTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public AccountMasterTableAdapter AccountMasterTableAdapter {
            get {
                return this._accountMasterTableAdapter;
            }
            set {
                this._accountMasterTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ChequeBookTableAdapter ChequeBookTableAdapter {
            get {
                return this._chequeBookTableAdapter;
            }
            set {
                this._chequeBookTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FixedDepositeTableAdapter FixedDepositeTableAdapter {
            get {
                return this._fixedDepositeTableAdapter;
            }
            set {
                this._fixedDepositeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public GuarantorTableAdapter GuarantorTableAdapter {
            get {
                return this._guarantorTableAdapter;
            }
            set {
                this._guarantorTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LockerTableAdapter LockerTableAdapter {
            get {
                return this._lockerTableAdapter;
            }
            set {
                this._lockerTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PasswordMasterTableAdapter PasswordMasterTableAdapter {
            get {
                return this._passwordMasterTableAdapter;
            }
            set {
                this._passwordMasterTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MinorTableAdapter MinorTableAdapter {
            get {
                return this._minorTableAdapter;
            }
            set {
                this._minorTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public HomeStudentLoanTableAdapter HomeStudentLoanTableAdapter {
            get {
                return this._homeStudentLoanTableAdapter;
            }
            set {
                this._homeStudentLoanTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LoanTransactionTableAdapter LoanTransactionTableAdapter {
            get {
                return this._loanTransactionTableAdapter;
            }
            set {
                this._loanTransactionTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public StudentLoanTableAdapter StudentLoanTableAdapter {
            get {
                return this._studentLoanTableAdapter;
            }
            set {
                this._studentLoanTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TransactionTableTableAdapter TransactionTableTableAdapter {
            get {
                return this._transactionTableTableAdapter;
            }
            set {
                this._transactionTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._jointHolderTableAdapter != null) 
                            && (this._jointHolderTableAdapter.Connection != null))) {
                    return this._jointHolderTableAdapter.Connection;
                }
                if (((this._accountMasterTableAdapter != null) 
                            && (this._accountMasterTableAdapter.Connection != null))) {
                    return this._accountMasterTableAdapter.Connection;
                }
                if (((this._chequeBookTableAdapter != null) 
                            && (this._chequeBookTableAdapter.Connection != null))) {
                    return this._chequeBookTableAdapter.Connection;
                }
                if (((this._fixedDepositeTableAdapter != null) 
                            && (this._fixedDepositeTableAdapter.Connection != null))) {
                    return this._fixedDepositeTableAdapter.Connection;
                }
                if (((this._guarantorTableAdapter != null) 
                            && (this._guarantorTableAdapter.Connection != null))) {
                    return this._guarantorTableAdapter.Connection;
                }
                if (((this._lockerTableAdapter != null) 
                            && (this._lockerTableAdapter.Connection != null))) {
                    return this._lockerTableAdapter.Connection;
                }
                if (((this._passwordMasterTableAdapter != null) 
                            && (this._passwordMasterTableAdapter.Connection != null))) {
                    return this._passwordMasterTableAdapter.Connection;
                }
                if (((this._minorTableAdapter != null) 
                            && (this._minorTableAdapter.Connection != null))) {
                    return this._minorTableAdapter.Connection;
                }
                if (((this._homeStudentLoanTableAdapter != null) 
                            && (this._homeStudentLoanTableAdapter.Connection != null))) {
                    return this._homeStudentLoanTableAdapter.Connection;
                }
                if (((this._loanTransactionTableAdapter != null) 
                            && (this._loanTransactionTableAdapter.Connection != null))) {
                    return this._loanTransactionTableAdapter.Connection;
                }
                if (((this._studentLoanTableAdapter != null) 
                            && (this._studentLoanTableAdapter.Connection != null))) {
                    return this._studentLoanTableAdapter.Connection;
                }
                if (((this._transactionTableTableAdapter != null) 
                            && (this._transactionTableTableAdapter.Connection != null))) {
                    return this._transactionTableTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._jointHolderTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._accountMasterTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._chequeBookTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fixedDepositeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._guarantorTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lockerTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._passwordMasterTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._minorTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._homeStudentLoanTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._loanTransactionTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._studentLoanTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._transactionTableTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(BankDataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._accountMasterTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AccountMaster.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._accountMasterTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._homeStudentLoanTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.HomeStudentLoan.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._homeStudentLoanTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._minorTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Minor.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._minorTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._loanTransactionTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LoanTransaction.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._loanTransactionTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._transactionTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TransactionTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._transactionTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._studentLoanTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.StudentLoan.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._studentLoanTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._passwordMasterTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PasswordMaster.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._passwordMasterTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._chequeBookTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ChequeBook.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._chequeBookTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._jointHolderTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.JointHolder.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._jointHolderTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fixedDepositeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FixedDeposite.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fixedDepositeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lockerTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Locker.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lockerTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._guarantorTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Guarantor.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._guarantorTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(BankDataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._accountMasterTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AccountMaster.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._accountMasterTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._homeStudentLoanTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.HomeStudentLoan.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._homeStudentLoanTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._minorTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Minor.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._minorTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._loanTransactionTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LoanTransaction.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._loanTransactionTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._transactionTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TransactionTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._transactionTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._studentLoanTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.StudentLoan.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._studentLoanTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._passwordMasterTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PasswordMaster.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._passwordMasterTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._chequeBookTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ChequeBook.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._chequeBookTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._jointHolderTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.JointHolder.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._jointHolderTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fixedDepositeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FixedDeposite.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fixedDepositeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lockerTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Locker.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lockerTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._guarantorTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Guarantor.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._guarantorTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(BankDataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._guarantorTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Guarantor.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._guarantorTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lockerTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Locker.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lockerTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fixedDepositeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FixedDeposite.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fixedDepositeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._jointHolderTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.JointHolder.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._jointHolderTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._chequeBookTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ChequeBook.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._chequeBookTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._passwordMasterTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PasswordMaster.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._passwordMasterTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._studentLoanTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.StudentLoan.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._studentLoanTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._transactionTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TransactionTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._transactionTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._loanTransactionTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LoanTransaction.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._loanTransactionTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._minorTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Minor.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._minorTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._homeStudentLoanTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.HomeStudentLoan.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._homeStudentLoanTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._accountMasterTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AccountMaster.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._accountMasterTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(BankDataSet2 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._jointHolderTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._jointHolderTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._accountMasterTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._accountMasterTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._chequeBookTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._chequeBookTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fixedDepositeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fixedDepositeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._guarantorTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._guarantorTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lockerTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lockerTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._passwordMasterTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._passwordMasterTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._minorTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._minorTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._homeStudentLoanTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._homeStudentLoanTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._loanTransactionTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._loanTransactionTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._studentLoanTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._studentLoanTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._transactionTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._transactionTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._jointHolderTableAdapter != null)) {
                    revertConnections.Add(this._jointHolderTableAdapter, this._jointHolderTableAdapter.Connection);
                    this._jointHolderTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._jointHolderTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._jointHolderTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._jointHolderTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._jointHolderTableAdapter.Adapter);
                    }
                }
                if ((this._accountMasterTableAdapter != null)) {
                    revertConnections.Add(this._accountMasterTableAdapter, this._accountMasterTableAdapter.Connection);
                    this._accountMasterTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._accountMasterTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._accountMasterTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._accountMasterTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._accountMasterTableAdapter.Adapter);
                    }
                }
                if ((this._chequeBookTableAdapter != null)) {
                    revertConnections.Add(this._chequeBookTableAdapter, this._chequeBookTableAdapter.Connection);
                    this._chequeBookTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._chequeBookTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._chequeBookTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._chequeBookTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._chequeBookTableAdapter.Adapter);
                    }
                }
                if ((this._fixedDepositeTableAdapter != null)) {
                    revertConnections.Add(this._fixedDepositeTableAdapter, this._fixedDepositeTableAdapter.Connection);
                    this._fixedDepositeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fixedDepositeTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fixedDepositeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fixedDepositeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fixedDepositeTableAdapter.Adapter);
                    }
                }
                if ((this._guarantorTableAdapter != null)) {
                    revertConnections.Add(this._guarantorTableAdapter, this._guarantorTableAdapter.Connection);
                    this._guarantorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._guarantorTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._guarantorTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._guarantorTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._guarantorTableAdapter.Adapter);
                    }
                }
                if ((this._lockerTableAdapter != null)) {
                    revertConnections.Add(this._lockerTableAdapter, this._lockerTableAdapter.Connection);
                    this._lockerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lockerTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lockerTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lockerTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lockerTableAdapter.Adapter);
                    }
                }
                if ((this._passwordMasterTableAdapter != null)) {
                    revertConnections.Add(this._passwordMasterTableAdapter, this._passwordMasterTableAdapter.Connection);
                    this._passwordMasterTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._passwordMasterTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._passwordMasterTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._passwordMasterTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._passwordMasterTableAdapter.Adapter);
                    }
                }
                if ((this._minorTableAdapter != null)) {
                    revertConnections.Add(this._minorTableAdapter, this._minorTableAdapter.Connection);
                    this._minorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._minorTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._minorTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._minorTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._minorTableAdapter.Adapter);
                    }
                }
                if ((this._homeStudentLoanTableAdapter != null)) {
                    revertConnections.Add(this._homeStudentLoanTableAdapter, this._homeStudentLoanTableAdapter.Connection);
                    this._homeStudentLoanTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._homeStudentLoanTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._homeStudentLoanTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._homeStudentLoanTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._homeStudentLoanTableAdapter.Adapter);
                    }
                }
                if ((this._loanTransactionTableAdapter != null)) {
                    revertConnections.Add(this._loanTransactionTableAdapter, this._loanTransactionTableAdapter.Connection);
                    this._loanTransactionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._loanTransactionTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._loanTransactionTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._loanTransactionTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._loanTransactionTableAdapter.Adapter);
                    }
                }
                if ((this._studentLoanTableAdapter != null)) {
                    revertConnections.Add(this._studentLoanTableAdapter, this._studentLoanTableAdapter.Connection);
                    this._studentLoanTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._studentLoanTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._studentLoanTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._studentLoanTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._studentLoanTableAdapter.Adapter);
                    }
                }
                if ((this._transactionTableTableAdapter != null)) {
                    revertConnections.Add(this._transactionTableTableAdapter, this._transactionTableTableAdapter.Connection);
                    this._transactionTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._transactionTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._transactionTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._transactionTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._transactionTableTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._jointHolderTableAdapter != null)) {
                    this._jointHolderTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._jointHolderTableAdapter]));
                    this._jointHolderTableAdapter.Transaction = null;
                }
                if ((this._accountMasterTableAdapter != null)) {
                    this._accountMasterTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._accountMasterTableAdapter]));
                    this._accountMasterTableAdapter.Transaction = null;
                }
                if ((this._chequeBookTableAdapter != null)) {
                    this._chequeBookTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._chequeBookTableAdapter]));
                    this._chequeBookTableAdapter.Transaction = null;
                }
                if ((this._fixedDepositeTableAdapter != null)) {
                    this._fixedDepositeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fixedDepositeTableAdapter]));
                    this._fixedDepositeTableAdapter.Transaction = null;
                }
                if ((this._guarantorTableAdapter != null)) {
                    this._guarantorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._guarantorTableAdapter]));
                    this._guarantorTableAdapter.Transaction = null;
                }
                if ((this._lockerTableAdapter != null)) {
                    this._lockerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lockerTableAdapter]));
                    this._lockerTableAdapter.Transaction = null;
                }
                if ((this._passwordMasterTableAdapter != null)) {
                    this._passwordMasterTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._passwordMasterTableAdapter]));
                    this._passwordMasterTableAdapter.Transaction = null;
                }
                if ((this._minorTableAdapter != null)) {
                    this._minorTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._minorTableAdapter]));
                    this._minorTableAdapter.Transaction = null;
                }
                if ((this._homeStudentLoanTableAdapter != null)) {
                    this._homeStudentLoanTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._homeStudentLoanTableAdapter]));
                    this._homeStudentLoanTableAdapter.Transaction = null;
                }
                if ((this._loanTransactionTableAdapter != null)) {
                    this._loanTransactionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._loanTransactionTableAdapter]));
                    this._loanTransactionTableAdapter.Transaction = null;
                }
                if ((this._studentLoanTableAdapter != null)) {
                    this._studentLoanTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._studentLoanTableAdapter]));
                    this._studentLoanTableAdapter.Transaction = null;
                }
                if ((this._transactionTableTableAdapter != null)) {
                    this._transactionTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._transactionTableTableAdapter]));
                    this._transactionTableTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591